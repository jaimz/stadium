// Generated by LiveScript 1.2.0
(function(){
  var util, Responder;
  util = require('./util.js');
  Responder = (function(){
    Responder.displayName = 'Responder';
    var prototype = Responder.prototype, constructor = Responder;
    function Responder(View, Hub){
      var ref$;
      this.View = View;
      this.Hub = Hub;
      this.keyup = bind$(this, 'keyup', prototype);
      this._activateSelection = bind$(this, '_activateSelection', prototype);
      this._calculateHubScroll = bind$(this, '_calculateHubScroll', prototype);
      this._focusChange = bind$(this, '_focusChange', prototype);
      this._moveFocusVertical = bind$(this, '_moveFocusVertical', prototype);
      this._changeFocusParent = bind$(this, '_changeFocusParent', prototype);
      this._moveFocus = bind$(this, '_moveFocus', prototype);
      this._changeFocus = bind$(this, '_changeFocus', prototype);
      this._removeConvoItem = bind$(this, '_removeConvoItem', prototype);
      this._createConvoItem = bind$(this, '_createConvoItem', prototype);
      this._generateAllConvoItems = bind$(this, '_generateAllConvoItems', prototype);
      this.willLoseFirstResponder = bind$(this, 'willLoseFirstResponder', prototype);
      this.willBecomeFirstResponder = bind$(this, 'willBecomeFirstResponder', prototype);
      this._hubView = this.Hub.View;
      this._hubEL = document.getElementById('hub');
      this._generateAllConvoItems();
      this._items = this.View.getElementsByClassName('app-menu-item');
      this._focus = this.View.querySelector('.focused');
      this._focusIdx = util.indexOfElement(this._focus);
      this._focusParent = (ref$ = this._focus) != null
        ? ref$
        : {
          parentElement: this._focus[null]
        };
      this._active = false;
      this._hubOffset = 0;
    }
    prototype.willBecomeFirstResponder = function(){
      this._active = true;
    };
    prototype.willLoseFirstResponder = function(){
      var s;
      this._active = false;
      s = Stadium.Hub.View.style;
      s.removeProperty('transform');
      s.removeProperty('-webkit-transform');
    };
    prototype._generateAllConvoItems = function(){
      var i$, ref$, len$, c;
      for (i$ = 0, len$ = (ref$ = this.Hub.ActiveConversations).length; i$ < len$; ++i$) {
        c = ref$[i$];
        this._createConvoItem(c);
      }
    };
    prototype._createConvoItem = function(convo){
      var item;
      item = util.make('div', ['app-menu-item', 'location'], this.View, convo.name);
      item.setAttribute("data-convo-id", convo.identity);
      this._changeFocus(item);
    };
    prototype._removeConvoItem = function(convo){
      var item;
      item = this.View.querySelector(".app-menu-item[data-convo-id=" + convo.identity + "]");
      if (item != null) {
        if (item.classList.contains('focused')) {
          this._changeFocus(this.View.children[2]);
        }
        this.View.removeChild(item);
      }
    };
    prototype._changeFocus = function(){
      if (item.parentElement !== this._focusParent) {
        this._focusParent = item.parentElement;
      }
      if (this._focus) {
        this._focus.classList.remove('focused');
      }
      this._focusIdx = SkIndexOfElement(item);
      this._focus = item;
      this._focus.classList.add('focused');
      this._focusChange(this._focus);
    };
    prototype._moveFocus = function(){
      var focusParent, children, newFocusIdx;
      focusParent = this._focusParent;
      if (!focusParent) {
        return;
      }
      children = focusParent.children;
      newFocusIdx = this._focusIdx + delta;
      if (newFocusIdx >= 0 && newFocusIdx < children.length) {
        this._focusIdx = newFocusIdx;
        if (this._focus) {
          this._focus.classList.remove('focused');
        }
        this._focus = children[newFocusIdx];
        this._focus.classList.add('focused');
        this._focusChange(this._focus);
      }
    };
    prototype._changeFocusParent = function(newParent){
      var children, l;
      if (newParent === this._focusParent) {
        return;
      }
      if (this._focus != null) {
        this._focus.classList.remove('focused');
      }
      this._focusParent = newParent;
      children = newParent.children;
      l = children.length;
      if (l > 0) {
        this._focusIdx = 0;
        this._focus = children[0];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocusVertical = function(delta){
      if (deepEq$(this._focusParent, this._view, '===') || deepEq$(this._focusParent, this._hubEl, '===')) {
        this._moveFocus(delta);
      } else {
        console.warn("Don't know how to move focus for: " + this._focusParent);
      }
    };
    prototype._focusChange = function(newFocus){
      if (newFocus.classList.contains('location') === false) {
        return;
      }
      this._calculateHubScroll();
    };
    prototype._calculateHubScroll = function(){
      var locIdx, offs, s;
      locIdx = this._focusIdx - 2;
      offs = 700 * locIdx;
      if (locIdx > 0) {
        offs += 20;
      }
      this.hubOffset = 0 - offs;
      if (this._active) {
        s = Stadium.Hub.View.style;
        if (this.hubOffset !== 0) {
          s.webkitTransform = ['transdisalateY(', this.hubOffset, 'px)'].join('');
          s.transform = ['translateY(', this.hubOffset, 'px)'].join('');
        } else {
          s.removeProperty('transform');
          s.removeProperty('-webkit-transform');
        }
      }
    };
    prototype._activateSelection = function(){
      var location;
      if (this._focus.classList.contains('location')) {
        location = this._focus.getAttribute('data-convo-id');
        Stadium.HideAppMenu(location);
      }
    };
    prototype.keyup = function(){
      var result;
      result = true;
      switch (e.skKey) {
      case "Up":
        this._moveFocusVertical2(-1);
        break;
      case "Down":
        this._moveFocusVertical2(1);
        break;
      case "Enter":
      case "Activate":
        this._activateSelection();
        break;
      default:
        result = false;
      }
      result;
    };
    return Responder;
  }());
  module.exports = {
    Responder: Responder
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) { 
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
