// Generated by LiveScript 1.2.0
(function(){
  var util, events, debug, __d, MxWithHistoryList, twoMinuteMillis, __getDayStampOfMessage, __pushChange, __sermonMessageCmp, __msgCmp, __stampDayCmp, Sermon, Day, History, this$ = this;
  util = require('./util.js');
  events = require('./events.js');
  debug = require('./debug.js');
  __d = new Date();
  MxWithHistoryList = {
    /* We currently re-render a whole day when we detect the
         first modification to that day.
         This removes subsequent modifications to a  day since they
         will have already been rendered */
    cleanLog: function(indicies, opers, dayIdx, fromIdx){
      var l, idx, removed;
      l = indicies.length;
      idx = fromIdx;
      removed = 0;
      while (idx < l) {
        if (indicies[idx] === dayIdx) {
          if (opers[idx] === 'i') {
            break;
          } else if (opers[idx] === 'm') {
            indicies.splice(idx, 1);
            opers.splice(idx, 1);
            l = indicies.length;
            removed += 1;
          } else {
            idx += 1;
          }
        } else {
          idx += 1;
        }
      }
      return removed;
    },
    mapDayIdx: function(dayIdx, indicies, opers, fromIdx){
      var idx, result, l;
      idx = fromIdx + 1;
      result = dayIdx;
      l = indicies.length;
      while (idx < l) {
        if (indicies[idx] <= result) {
          if (opers[idx] === 'i') {
            result += 1;
          }
        }
        idx += 1;
      }
      return result;
    },
    replayChanges: function(log){
      var indicies, opers, l, idx, dayIdx, dayDataIdx, oper, dayPanels, i$, len$, p;
      indicies = log.i;
      opers = log.o;
      l = indicies.length;
      if (opers.length !== l) {
        console.warn('Opers and Indicies lengths do not match');
        return;
      }
      idx = 0;
      dayIdx = -1;
      dayDataIdx = -1;
      oper = null;
      dayPanels = this$._messages.getElementsByClassName('day');
      while (idx < l) {
        dayIdx = indicies[idx];
        dayDataIdx = this$._mapDayIdx(dayIdx, indicies, opers, idx);
        oper = opers[idx];
        if (oper === 'i') {
          for (i$ = 0, len$ = dayPanels.length; i$ < len$; ++i$) {
            p = dayPanels[i$];
            if (p.children.length === 1) {
              console.log('screwed up');
              console.log('i: ' + log.i.join(','));
              console.log('o: ' + log.o.join(','));
            }
          }
        }
        this$._replay(dayIdx, dayDataIdx, indicies, oper, dayPanels);
        if (oper === 'm') {
          l -= this$._cleanLog(indicies, opers, dayIdx, idx + 1);
        }
        idx += 1;
      }
    },
    replay: function(dayIdx, dayDataIdx, indicies, oper, dayPanels){
      var day, messages, panelIdx, newDayPanel, existingDayPanel, ref$;
      day = this$._conversation.History.Days[dayDataIdx];
      messages = this$._messages;
      panelIdx = (dayPanels.length - 1) - dayIdx;
      switch (oper) {
      case "m":
        this$._reRenderDay(day, dayPanels[panelIdx]);
        break;
      case "i":
        newDayPanel = this$._createPanelForDay(day);
        if (dayPanels.length > 0) {
          if (panelIdx < dayPanels.length) {
            existingDayPanel = (ref$ = panelIdx >= 0) != null
              ? ref$
              : dayPanels[panelIdx]((function(){
                dayPanels: return [0];
              }()));
            messages.insertBefore(newDayPanel, existingDayPanel);
          } else {
            messages.appendChild(newDayPanel);
          }
        } else {
          messages.appendChild(newDayPanel);
        }
        break;
      default:
        console.error("Don't recognise operation: " + currOper);
      }
    },
    _createPanelForDay: function(day){
      var panel, dayStamp, dateStr;
      panel = util.make("div", "day");
      panel.setAttribute('data-stamp', day.timeStamp + "");
      dayStamp = util.make('div', 'daystamp');
      __d.setTime(day.timeStamp);
      dateStr = __d.toDateString();
      dateStr = dateStr.substring(0, dateStr.length - 5);
      dayStamp = util.make("div", "daystamp", panel, dayStr);
      return panel;
    },
    _reRenderDay: function(day, dayPanel){
      var sermonPanels, changes, indicies, opers, currIdx, currOper, sermons, sermon, existingSermonPanel, newSermonPanel, l, i$, to$, i;
      sermonPanels = dayPanel.getElementsByClassName('sermon');
      changes = day.changes;
      indicies = changes.i;
      opers = changes.o;
      if (indicies.length !== opers.length) {
        console.error("Length mis-match between opers and indicies");
        return;
      }
      currIdx = -1;
      currOper = null;
      sermons = day.sermons;
      sermon = null;
      existingSermonPanel = null;
      newSermonPanel = null;
      l = indicies.length;
      for (i$ = 0, to$ = l - 1; i$ <= to$; ++i$) {
        i = i$;
        currIdx = indicies[i];
        currOper = opers[i];
        sermon = sermons[currIdx];
        switch (currOper) {
        case 'm':
          this$._reRenderSermon(sermon, sermonPanels[currIdx]);
          break;
        case 'i':
          newSermonPanel = this$._createSermonPanel(sermon);
          if (currIdx < sermonPanels.length) {
            existingSermonPanel = sermonPanels[currIdx];
            dayPanel.insertBefore(newSermonPanel, existingSermonPanel);
          } else {
            dayPanel.appendChild(newSermonPanel);
          }
          break;
        default:
          console.warn("Don't know what to do with operation: " + currOper);
        }
      }
      if (dayPanel.children.length === 1) {
        console.log('screwed up day');
        console.log('i: ' + changes.i.join(','));
        console.log('o: ' + changes.o.join(','));
      }
      day.clearChanges();
    }
    /*
      Create DOM to represent a 'sermon' (a continuous collection of
      messages from the same user)
    */,
    _createSermonPanel: function(sermon){
      var messages, result, avatar, timeStamp, content, msgs_content, author, i$, len$, message;
      messages = sermon.messages;
      result = util.make('div', 'sermon');
      avatar = util.make('div', 'msg_avatar', result);
      avatar.style.backgroundImage = "url(" + (sermon.avatar || './img/PictureContact160_trans@2x.png') + ")";
      __d.setTime(messages[0].timeStamp);
      timeStamp = util.make('div', 'timestamp', result, __d.toTimeString().substring(0, 5));
      content = util.make('div', 'content', result);
      msgs_content = util.make('div', 'msgs_content', content);
      author = util.make('div', 'author', content, messages[0].author);
      for (i$ = 0, len$ = messages.length; i$ < len$; ++i$) {
        message = messages[i$];
        util.make('div', 'message', message.message, msg_content);
      }
      return result;
    },
    _reRenderSermon: function(sermon, sermonPanel){
      var messages, l, newContent, msgs_content, author, i$, len$, message, existingContent, stamp;
      messages = sermon.messages;
      l = messages.length;
      newContent = util.make('div', 'content');
      msgs_content = util.make('div', 'msgs_content', newContent);
      if (l > 0) {
        author = util.make('div', 'author', newContent, messages[0].author);
        for (i$ = 0, len$ = messages.length; i$ < len$; ++i$) {
          message = messages[i$];
          util.make('div', 'message', message.message, msg_content);
        }
      }
      existingContent = sermonPanel.getElementsByClassName('content');
      stamp = sermonPanel.getElementsByClassName('timestamp');
      while (existingContent.length > 0) {
        sermonPanel.removeChild(existingContent[0]);
      }
      if (stamp.length > 0) {
        sermonPanel.insertBefore(newContent, stamp[0]);
      } else {
        sermonPanel.appendChild(newContent);
      }
    }
  };
  twoMinuteMillis = 2 * 60 * 1000;
  __getDayStampOfMessage = function(message){
    __d.setTime(message.timeStamp);
    __d.setHours(0);
    __d.setMinutes(0);
    __d.setSeconds(0);
    __d.setMilliseconds(0);
    return __d.getTime();
  };
  __pushChange = function(changes, index, oper){
    var i, o, l;
    i = changes.i;
    o = changes.o;
    l = i.length;
    if (o.length !== l) {
      console.error('Mis-matches lengths between opers and indicies!');
      return;
    }
    if (l > 0) {
      if (i[l - 1] === index && o[l - 1] === oper) {
        return;
      }
    }
    i.push(index);
    return o.push(oper);
  };
  __sermonMessageCmp = function(message, sermon){
    return sermon.timeStamp - message.timeStamp;
  };
  __msgCmp = function(first, second){
    return first.timeStamp - second.timeStamp;
  };
  __stampDayCmp = function(dayStamp, day){
    return dayStamp - day.timeStamp;
  };
  Sermon = (function(){
    Sermon.displayName = 'Sermon';
    var prototype = Sermon.prototype, constructor = Sermon;
    function Sermon(message){
      this.append = bind$(this, 'append', prototype);
      this.insert = bind$(this, 'insert', prototype);
      Object.defineProperties(this, {
        messages: {
          value: [message],
          writable: true,
          enumerable: true
        },
        userId: {
          value: message.userIdentifier,
          writable: true,
          enumerable: true
        },
        userName: {
          value: message.userName,
          writable: true,
          enumerable: true
        },
        avatar: {
          value: "./img/PictureContact160_trans@2x.png",
          writable: true,
          enumerable: true
        },
        timeStamp: {
          value: message.timeStamp,
          writable: true,
          enumerable: true
        }
      });
    }
    prototype.insert = function(message){
      var messages, i;
      messages = this.messages;
      i = util.insertionIndexFor(message, messages, __msgCmp);
      if (i < messages.length) {
        messages.splice(i, 0, message);
      } else {
        message.push(message);
      }
    };
    prototype.append = function(message){
      return this.messages.push(message);
    };
    return Sermon;
  }());
  Day = (function(){
    Day.displayName = 'Day';
    var prototype = Day.prototype, constructor = Day;
    function Day(){
      this.clearChanges = bind$(this, 'clearChanges', prototype);
      this.insertMessages = bind$(this, 'insertMessages', prototype);
      this.insertMessage = bind$(this, 'insertMessage', prototype);
      Object.defineProperties(this, {
        sermons: {
          value: [],
          writable: true,
          enumerable: true
        },
        timeStamp: {
          value: null,
          writable: true,
          enumerable: true
        },
        changes: {
          value: {
            i: [],
            o: []
          },
          writable: true,
          enumerable: true
        }
      });
    }
    prototype.insertMessage = function(message){
      var idx, modifiedExisting, l, prevSermon, messageCount, prevMessage, sermon;
      idx = util.insertionIndexFor(message, this.sermons, __sermonMessageCmp);
      modifiedExisting = false;
      l = sermons.length;
      if (idx > -1) {
        if (idx > 0) {
          prevSermon = this.sermons[idx - 1];
          if (prevSermon.userId === message.userIdentifier) {
            messageCount = prevSermon.messages.length;
            prevMessage = prevSermon.messages[messageCount - 1];
            if (message.timeStamp - prevMessage.timeStamp < twoMinuteMillis) {
              idx -= 1;
              prevSermon.append(message);
              modifiedExisting = true;
            }
          }
          if (!modifiedExisting) {
            sermon = new Sermon(message);
            if (idx < l) {
              this.Sermons.splice(idx, 0, sermon);
            } else {
              this.Sermons.push(sermon);
            }
          }
          if (this.timeStamp == null) {
            this.timeStamp = __getDayStampOfMessage(message);
          }
        }
        __pushChange(this.changes, idx, modifiedExisting != null
          ? modifiedExisting
          : {
            'm': 'i'
          });
      }
    };
    prototype.insertMessages = function(messageCollection){
      var i$, len$, m;
      for (i$ = 0, len$ = messageCollection.length; i$ < len$; ++i$) {
        m = messageCollection[i$];
        this.insertMessage(m);
      }
    };
    prototype.clearChanges = function(){
      this.changes.i.splice(0);
      this.changes.o.splice(0);
    };
    return Day;
  }());
  History = (function(){
    History.displayName = 'History';
    var prototype = History.prototype, constructor = History;
    importAll$(prototype, arguments[0]);
    function History(){
      this.load = bind$(this, 'load', prototype);
      this.clearChanges = bind$(this, 'clearChanges', prototype);
      this._failedMessages = bind$(this, '_failedMessages', prototype);
      this._gotMessages = bind$(this, '_gotMessages', prototype);
      Object.defineProperties(this, {
        Days: {
          value: [],
          writable: true,
          enumerable: true
        },
        changes: {
          value: {
            i: [],
            o: []
          },
          writable: true,
          enumerable: true
        },
        earlistMessageTime: {
          value: Date.now(),
          writable: true,
          enumerable: true
        },
        targetMessageTime: {
          value: Date.now(),
          writable: true,
          enumerable: true
        },
        cache: {
          value: {},
          writable: true,
          enumerable: true
        }
      });
    }
    prototype._gotMessages = function(messages){
      var days, i$, len$, message, dayStamp, dayIdx, day;
      days = this.Days;
      for (i$ = 0, len$ = messages.length; i$ < len$; ++i$) {
        message = messages[i$];
        dayStamp = __getDayStampOfMessage(message);
        dayIdx = util.insertionIndexFor(dayStamp, days, __stampDayCmp);
        if (dayIdx > 0 && days[dayIdx - 1].timeStamp === dayStamp) {
          dayIdx -= 1;
          day = days[dayIdx];
          day.insertMessage(message);
          __pushChange(this.changes, dayIdx, 'm');
        } else {
          day = new Day();
          if (dayIdx < days.length) {
            days.splice(dayIdx, 0, day);
          } else {
            days.push(day);
          }
          __pushChange(this.changes, dayIdx, 'i');
          day.insertMessage(message);
          __pushChange(changes, dayIdx, 'm');
        }
      }
      if (messages.length > 0) {
        this.fireEvent('messages_arrived', this);
      }
    };
    prototype._failedMessages = function(error){
      console.error("Message load failed: " + error);
    };
    prototype.clearChanges = function(){
      var i$, ref$, len$, day;
      for (i$ = 0, len$ = (ref$ = this.Days).length; i$ < len$; ++i$) {
        day = ref$[i$];
        day.clearChanges();
      }
      this.changes.i.splice(0);
      this.changes.o.splice(0);
    };
    prototype.load = function(){
      debug.RandomMessages(10, this._gotMessages);
    };
    return History;
  }(events.MxWithEvents));
  module.exports = {
    MxWithHistoryList: MxWithHistoryList,
    History: History
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
