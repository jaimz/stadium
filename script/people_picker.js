// Generated by LiveScript 1.2.0
(function(){
  var util, delegation, Responder;
  util = require('./util.js');
  delegation = require('./delegation.js');
  Responder = (function(){
    Responder.displayName = 'Responder';
    var prototype = Responder.prototype, constructor = Responder;
    importAll$(prototype, arguments[0]);
    function Responder(peopleEl){
      this.keyup = bind$(this, 'keyup', prototype);
      this._cancelPick = bind$(this, '_cancelPick', prototype);
      this._activateSelection = bind$(this, '_activateSelection', prototype);
      this._moveFocusHorizontal = bind$(this, '_moveFocusHorizontal', prototype);
      this._moveFocus = bind$(this, '_moveFocus', prototype);
      this.willBecomeFirstResponder = bind$(this, 'willBecomeFirstResponder', prototype);
      this._el = util.getEl(peopleEl, 'conversations');
      this._focus = null;
      this._focusIdx = null;
    }
    prototype.willBecomeFirstResponder = function(){
      var children;
      this._focus = this._el.querySelector('.focused');
      if (this._focus) {
        this._focusIdx = util.indexOfElement(this._focus);
      } else {
        children = this._el.children;
        if (children.length > 0) {
          this._focusIdx = 0;
          this._focus = children[this._focusIdx];
          children[this._focusIdx].classList.add("focused");
        }
      }
    };
    prototype._moveFocus = function(delta){
      var children, newFocusIdx;
      children = this._el.children;
      newFocusIdx = this._focusIdx + delta;
      if (newFocusIdx >= 0 && newFocusIdx < children.length) {
        this._focusIdx = newFocusIdx;
        if (this._focus) {
          this._focus.classList.remove('focused');
        }
        this._focus = children[newFocusIdx];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocusVertical = Responder._moveFocus;
    prototype._moveFocusHorizontal = function(delta){
      return this._moveFocus(delta * 2);
    };
    prototype._activateSelection = function(){
      var l, convoId, convo, person;
      l = this._delegates.length;
      if (!(l > 0)) {
        return;
      }
      convoId = this._focus.getAttribute('data-convo-id');
      if (convoId == null) {
        console.warn('No convo ID when picking person');
        return;
      }
      convo = Stadium.HubRepository.FindConvo(convoId);
      if (convo == null) {
        console.warn('Could not find convo when picking person: ' + convoId);
        return;
      }
      if (!(convo.participants.length > 0)) {
        console.warn('Empty conversation when picking participant?' + convo);
        return;
      }
      person = convo.participants[0];
      this.callDelegate('personPicked', person);
    };
    prototype._cancelPick = function(){
      Stadium.Hub.endParticipantPick();
      this.callDelegate('personPickCancelled', null);
    };
    prototype.keyup = function(e){
      var result;
      result = true;
      switch (e.skKey) {
      case "Up":
        this._moveFocusVertical(-1);
        break;
      case "Down":
        this._moveFocusVertical(1);
        break;
      case "Left":
        this._moveFocusHorizontal(-1);
        break;
      case "Right":
        this._moveFocusHorizontal(1);
        break;
      case "Enter":
        break;
      case "Activate":
        this._activateSelection();
        break;
      case "Back":
        this._cancelPick();
        break;
      default:
        result = false;
      }
      return result;
    };
    return Responder;
  }(delegation.WithDelegation));
  module.exports = {
    Responder: Responder,
    ResponderInstance: new Responder()
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
