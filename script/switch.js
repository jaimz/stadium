// Generated by LiveScript 1.2.0
(function(){
  "use strict";
  var util, _, kStackClass, kItemClass, kSwitchesClass, kSwitchClass, kOffRightClass, kOffLeftClass, kSelectedClass, kVisibleClass, kVisibleItemClass, Switch;
  util = require('./util.js');
  _ = require('prelude-ls');
  kStackClass = 'nav_stack';
  kItemClass = 'nav_item';
  kSwitchesClass = 'switches';
  kSwitchClass = 'switch';
  kOffRightClass = 'off_right';
  kOffLeftClass = 'off_left';
  kSelectedClass = 'selected';
  kVisibleClass = 'visible';
  kVisibleItemClass = kItemClass + " " + kVisibleClass;
  Switch = (function(){
    Switch.displayName = 'Switch';
    var prototype = Switch.prototype, constructor = Switch;
    function Switch(el){
      this.click = bind$(this, 'click', prototype);
      this.dontListen = bind$(this, 'dontListen', prototype);
      this.listen = bind$(this, 'listen', prototype);
      this.setView = bind$(this, 'setView', prototype);
      if (el == null) {
        throw new Error('Need an element to switch');
      }
      this.selected = null;
      this.selectedIdx = -1;
      this.delegates = [];
      this.offLeft = [];
      this.offRight = [];
      this.setView(el);
    }
    prototype.setView = function(el){
      if (this.View != null) {
        this.dontListen();
      }
      this.View = util.getEl(el);
      if (this.View != null) {
        this.triggers = this.View.getElementsByClassName(kSwitchClass);
        this.offRight = this.View.getElementsByClassName(kOffRightClass);
        this.offLeft = this.View.getElementsByClassName(kOffLeftClass);
        this.listen();
        this.selectedIdx = _.findIndex(function(e){
          return e.classList.contains(kSelectedClass);
        }, this.triggers);
        if (this.selectedIdx != null) {
          this.selected = this.triggers[this.selectedIdx];
        } else {
          this.selected = null;
          this.selectedIdx = -1;
        }
        return this.visiblePanel = this.View.getElementsByClassName(kVisibleItemClass);
      }
    };
    prototype.listen = function(){
      if (this.View != null) {
        return this.View.addEventListener('click', this.click);
      }
    };
    prototype.dontListen = function(){
      if (this.View != null) {
        return this.View.removeEventListener('click', this.click);
      }
    };
    prototype.click = function(e){
      var item, itemCl, newIdx, d, _inc, fromClass, fromItems, toClass, cl, i;
      item = e.srcElement;
      if (item != null) {
        itemCl = item.classList;
        if (itemCl.contains('switch')) {
          if (!itemCl.contains('selected')) {
            if (this.selected != null) {
              this.selected.classList.remove('selected');
            }
            this.selected = item;
            if (this.selectedIdx !== -1) {
              newIdx = Array.prototype.indexOf.call(this.triggers, this.selected);
              if (newIdx !== -1) {
                d = newIdx - this.selectedIdx;
                if (d > 0) {
                  _inc = -1;
                  fromClass = kOffRightClass;
                  fromItems = this.offRight;
                  toClass = kOffLeftClass;
                } else {
                  _inc = 1;
                  fromClass = kOffLeftClass;
                  fromItems = this.offLeft;
                  toClass = kOffRightClass;
                }
                d += _inc;
                while (this.visiblePanel.length > 0) {
                  cl = this.visiblePanel[0].classList;
                  cl.add(toClass);
                  cl.remove(kVisibleClass);
                }
                while (d !== 0 && fromItems > 0) {
                  i = fromItems[0];
                  i.classList.remove(fromClass);
                  i.classList.add(toClass);
                }
                if (fromItems.length > 0) {
                  cl = fromItems[0].classList;
                  cl.remove(fromClass);
                  cl.add(kVisibleClass);
                }
              }
              return itemCl.add('selected');
            } else {
              console.warn("could not find trigger in collection");
              return console.warn(this.selected);
            }
          }
        }
      }
    };
    return Switch;
  }());
  module.exports = {
    Switch: Switch
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
