// Generated by LiveScript 1.2.0
(function(){
  var _, events, history, video, ConversationResponder, Instance;
  _ = require('prelude-ls');
  events = require('./events.js');
  history = require('./history.js');
  video = require('./video.js');
  /*
    This responder handles interaction with a conversation
    view in both call and non-call modes
  */
  ConversationResponder = (function(){
    ConversationResponder.displayName = 'ConversationResponder';
    var prototype = ConversationResponder.prototype, constructor = ConversationResponder;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    importAll$(prototype, arguments[2]);
    function ConversationResponder(){
      this.keyup = bind$(this, 'keyup', prototype);
      this._calculateGroupStatus = bind$(this, '_calculateGroupStatus', prototype);
      this._dropVideoFromPanel = bind$(this, '_dropVideoFromPanel', prototype);
      this._addNewVideos = bind$(this, '_addNewVideos', prototype);
      this._lostParticipantVideo = bind$(this, '_lostParticipantVideo', prototype);
      this._gainedParticipantVideo = bind$(this, '_gainedParticipantVideo', prototype);
      this._participantLeft = bind$(this, '_participantLeft', prototype);
      this._participantArrived = bind$(this, '_participantArrived', prototype);
      this._participantsChanged = bind$(this, '_participantsChanged', prototype);
      this._getPanelForParticipant = bind$(this, '_getPanelForParticipant', prototype);
      this._createPanelForParticipant = bind$(this, '_createPanelForParticipant', prototype);
      this._activateSelection = bind$(this, '_activateSelection', prototype);
      this._moveFocusHorizontal = bind$(this, '_moveFocusHorizontal', prototype);
      this._moveFocusVertical = bind$(this, '_moveFocusVertical', prototype);
      this._moveFocus = bind$(this, '_moveFocus', prototype);
      this._changeFocusParent = bind$(this, '_changeFocusParent', prototype);
      this.__makeCallDebug = bind$(this, '__makeCallDebug', prototype);
      this._initCommands = bind$(this, '_initCommands', prototype);
      this._dontListen = bind$(this, '_dontListen', prototype);
      this._listen = bind$(this, '_listen', prototype);
      this._unloadConversation = bind$(this, '_unloadConversation', prototype);
      this._inspectConversation = bind$(this, '_inspectConversation', prototype);
      this._inspectView = bind$(this, '_inspectView', prototype);
      this._resetFocus = bind$(this, '_resetFocus', prototype);
      this._conversation = null;
      this._view = null;
      this._actions = null;
      this._callActions = null;
      this._resetFocus();
      this._allActions = null;
      this._commands = {};
      Object.defineProperties(this, {
        Conversation: {
          enumerable: true,
          set: function(v){
            if (this._conversation != null) {
              this._unloadConversation();
            }
            this._conversation = v || null;
            if (this._conversation != null) {
              return this._inspectConversation;
            }
          },
          get: function(){
            return this._conversation;
          }
        },
        View: {
          enumerable: true,
          set: function(v){
            this._view = v || null;
            this._resetFocus();
            return this._inspectView();
          }
        }
      });
      this._initCommands();
    }
    prototype._resetFocus = function(){
      this._focus = null;
      this._focusIdx = 0;
      this._focusParent = null;
    };
    prototype._inspectView = function(){
      this._convoActions = this._view.querySelector('.convo_actions');
      this._callActions = this._view.querySelector('.call_actions');
      this._participantContainer = this._view.querySelector('.participants');
      this._participantPanels = this._participantContainer.querySelectorAll('.participant');
      this._messages = this._view.querySelector('.messages');
      if (this._view.classList.contains("in-call")) {
        this._changeFocusParent(this._callActions);
      } else {
        this._changeFocusParent(this._convoActions);
      }
      this._deregisterEvents();
      this._allActions = this._view.querySelectorAll('.action');
      this._registerEvents();
    };
    prototype._inspectConversation = function(){
      var convo;
      convo = this.Conversation;
      convo.addEventListener('participants_changed', this._participantsChanged);
      convo.addEventListener('participant_arrived', this._participantArrived);
      convo.addEventListener('participant_left', this._participantLeft);
      convo.addEventListener('participant_voice_change', this._participantVoiceChange);
      convo.addEventListener('gained_participant_video', this._gainedParticipantVideo);
      convo.addEventListener('lost_participant_video', this._lostParticipantVideo);
      convo.History.addEventListener('messages_arrived', this._messagesArrived);
    };
    prototype._unloadConversation = function(){
      var convo;
      convo = this.Conversation;
      if (convo == null) {
        return;
      }
      convo.addEventListener('participants_changed', this._participantsChanged);
      convo.addEventListener('participant_arrived', this._participantArrived);
      convo.addEventListener('participant_left', this._participantLeft);
      convo.addEventListener('participant_voice_change', this._participantVoiceChange);
      convo.addEventListener('gained_participant_video', this._gainedParticipantVideo);
      convo.addEventListener('lost_participant_video', this._lostParticipantVideo);
      convo.History.addEventListener('messages_arrived', this._messagesArrived);
    };
    prototype._listen = function(){
      var activateSelection;
      if (!(this._allActions && this._allActions.length > 0)) {
        return;
      }
      activateSelection = this._activateSelection;
      _.each(function(it){
        return it.addEventListener('click', activateSelection);
      }, this._allActions);
    };
    prototype._dontListen = function(){
      var activateSelection;
      if (!(this._allActions && this._allActions.length > 0)) {
        return;
      }
      activateSelection = this._activateSelection;
      _.each(function(it){
        return it.removeEventListener('click', activateSelection);
      }, this._allActions);
    };
    prototype._initCommands = function(){
      this._commands = {
        makeVideoCall: function(){
          return this.__makeCallDebug('video-call');
        },
        makeAudioCall: function(){
          return this.__makeCallDebug('audio-call');
        },
        endCall: function(){
          var cl, pc, c;
          cl = this._view.classList;
          cl.remove('calling');
          cl.remove('has-video');
          cl.remove('is-group');
          cl.remove('in-call');
          cl.remove('video-call');
          cl.remove('audio-call');
          pc = this._participantContainer;
          c = pc.children;
          while (c.length > 0) {
            pc.removeChild(c[0]);
          }
          return this._changeFocusParent(this._convoActions);
        },
        toggleIMs: function(){
          return this._view.classList.toggle('ims-visible');
        },
        addParticipant: function(){
          Stadium.Responders.PeoplePickerInstance.addDelegate(this);
          return Stadium.Instance.Hub.startParticipantPick();
        }
      };
    };
    prototype.__makeCallDebug = function(callType){
      var v, cl, convo, this$ = this;
      v = this._view;
      cl = v.classList;
      cl.add('calling');
      convo = this._conversation;
      setTimeout(function(){
        cl.remove("calling");
        cl.add("ringing");
        setTimeout(function(){
          cl.remove('ringing');
          cl.add('in-call');
          setTimeout(function(){
            var f;
            if (this$._participantPanels.length > 1) {
              cl.add('is-group');
              cl.add(callType);
              this$._changeFocusParent(this$._callActions);
              f = function(p){
                var panel;
                panel = this._createPanelForParticipant(p);
                this._participantContainer.appendChild(panel);
                this._calculateGroupStatus();
              };
              _.each(f, convo.participants);
            }
          }, 500);
        }, 2000);
      }, 1200);
    };
    prototype._changeFocusParent = function(newParent){
      var children, l;
      if (newParent === this._focusParent) {
        return;
      }
      if (this._focus != null) {
        this._focus.classList.remove('focused');
      }
      this._focusParent = newParent;
      children = newParent.children;
      l = children.length;
      if (l > 0) {
        this._focusIdx = 0;
        this._focus = children[0];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocus = function(delta){
      var focusParent, children, newFocusIdx;
      focusParent = this._focusParent;
      if (focusParent == null) {
        return;
      }
      children = focusParent.children;
      newFocusIdx = this._focusIdx + delta;
      if (newFocusIdx >= 0 && newFocusIdx < children.length) {
        this._focusIdx = newFocusIdx;
        if (this._focus) {
          this._focus.classList.remove('focused');
        }
        this._focus = children[newFocusIdx];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocusVertical = function(delta){
      if (this._focusParent === this._convoActions) {
        this._moveFocus(delta);
      } else if (this._focusParent === this._callActions) {
        if (delta < 0) {
          if (this._participantPanels.length > 1) {
            this._changeFocusParent(this._participantContainer);
          }
        }
      } else if (this._focusParent === this._participantContainer) {
        if (delta > 0) {
          this._changeFocusParent(this._callActions);
        }
      }
    };
    prototype._moveFocusHorizontal = function(delta){
      this._moveFocus(delta);
    };
    prototype._activateSelection = function(e){
      var selection, selectionType, cmdId;
      selection = e != null
        ? e
        : {
          currentTarget: e[this._focus]
        };
      if (selection == null) {
        return;
      }
      selectionType = selection.classList[0];
      switch (selectionType) {
      case "action":
        cmdId = selection.getAttribute('data-cmd-id');
        if (cmdId != null && cmdId(id(this._commands))) {
          this._commands[cmdId].call(this, this.Conversation, this.View);
        }
        break;
      case "participant":
        this._toggleFullscreen(selection);
        break;
      }
      if (e != null) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
    prototype._createPanelForParticipant = function(participant){
      var pTag, avatar, name, l, cl;
      pTag = util.make('div', 'participant');
      pTag.setAttribute('data-id', participant.identifier);
      avatar = util.make('div', 'avatar', pTag);
      if (participant.avatar != null) {
        avatar.style.backgroundImage = "url(" + participant.avatar + ")";
      }
      name = util.make('div', 'name', avatar, participant.name || "");
      this._participantPanels = this._participantContainer.querySelectorAll('.participant');
      l = this._participantPanels.length;
      cl = this._view.classList;
      if (l > 1) {
        if (cl.contains('is-group') === false) {
          cl.add('is-group');
        }
        if (l > 2) {
          cl.add('three-group');
        } else {
          cl.remove('three-group');
        }
      } else {
        cl.remove('is-group');
      }
      return pTag;
    };
    prototype._getPanelForParticipant = function(participants){
      return _.find(function(panel){
        return panel.getAttribute('data-id') === participant.identifier;
      }, this._participantPanels);
    };
    prototype._participantsChanged = function(participants){
      var rm_fn, add_fn, this$ = this;
      rm_fn = function(panel){
        this$._participantContainer.removeChild(panel);
      };
      _.each(rm_fn, this._participantPanels);
      add_fn = function(participant){
        this$._participantContainer.appendChild(this$._createPanelForParticipant(participant));
      };
      _.each(add_fn, participants);
      this._calculateGroupStatus();
    };
    prototype._participantArrived = function(participant){
      this._participantContainer.appendChild(this._createPanelForParticipant(participant));
      this._calculateGroupStatus();
    };
    prototype._participantLeft = function(participant){
      var panel, pcl, v, vcl, this$ = this;
      panel = this._getPanelForParticipant(participant);
      if (panel == null) {
        console.warn("Could not find panel for participant " + participant.identifier);
        return;
      }
      pcl = panel.classList;
      v = this._view;
      vcl = v.classList;
      if (pcl.contains('with-video')) {
        this._dropVideoFromPanel(panel);
      }
      pcl.add('lost');
      setTimeout(function(){
        this$._participantContainer.removeChild(panel);
        this$._calculateGroupStatus();
      }, 1000);
    };
    prototype._gainedParticipantVideo = function(participant){
      var panel, videos, videoTags;
      panel = this._getPanelForParticipant(participant);
      if (!panel) {
        console.warn("Could not get panel for: " + participant.identifier);
        return;
      }
      videos = participant.remoteVideos;
      if (videos == null) {
        return;
      }
      videoTags = panel.getElementsByTagName('video');
      this._addNewVideos(panel, videoTags, videos);
    };
    prototype._lostParticipantVideo = function(participant){
      var panel;
      panel = this._getPanelForParticipant(participant);
      if (panel == null) {
        console.warn("Could not get panel for " + participant.identifier);
        return;
      }
      this._dropVideoFromPanel(panel);
    };
    prototype._addNewVideos = function(panel, videoTags, remoteVideos){
      var addedVideos;
      addedVideos = _.each(function(rv){
        var t;
        t = rv.VideoTag;
        t.classList.add('video-feed');
        t.setAttribute('data-vid-id', rv.identifier);
        return panel.insertBefore(t, videoTags[0]);
      })(
      _.filter(function(rv){
        return _.find(function(it){
          return it.getAttribute('data-vid-id' === rv.identifier);
        }) == null;
      })(
      _.filter(function(it){
        return it.Playing === true;
      })(
      remoteVideos)));
      if (addedVideos.length > 0) {
        if (this._view.classList.contains('has-video') === false) {
          this._view.classList.add('has-video');
        }
        return setTimeout(function(){
          var i$, ref$, len$, v, results$ = [];
          for (i$ = 0, len$ = (ref$ = addedVideos).length; i$ < len$; ++i$) {
            v = ref$[i$];
            results$.push(v.VideoTag.play());
          }
          return results$;
        }, 0);
      }
    };
    prototype._dropVideoFromPanel = function(panel){};
    prototype._calculateGroupStatus = function(){
      var l, cl, this$ = this;
      this._participantPanels = this._participantContainer.querySelectorAll('.participant');
      l = this._participantPanels.length;
      cl = this._view.classList;
      if (l < 2) {
        cl.remove('is-group');
      } else {
        if (!cl.contains('is-group')) {
          setTimeout(function(){
            cl.add('is-group');
          }, 200);
        }
        if (l > 2) {
          if (!cl.contains('three-group')) {
            setTimeout(function(){
              cl.add('three-group');
            }, 250);
          } else {
            setTimeout(function(){
              cl.remove('three-group');
            }, 250);
          }
        } else {
          if (cl.contains('three-group')) {
            setTimeout(function(){
              cl.remove('three-group');
            }, 200);
          }
        }
      }
    };
    prototype.keyup = function(e){
      var cl;
      if (!(this.View != null && this.Conversation != null)) {
        return;
      }
      switch (e.stKey) {
      case "Up":
        this._moveFocusVertical(-1);
        break;
      case "Down":
        this._moveFocusVertical(1);
        break;
      case "Left":
        this._moveFocusHorizontal(-1);
        break;
      case "Right":
        this._moveFocusHorizontal(1);
        break;
      case "Enter":
      case "Activate":
        this._activateSelection();
        break;
      case "Back":
        if (this.View != null) {
          cl = this.View.classList;
          if (cl.contains('ims-visible')) {
            cl.remove('ims-visible');
          } else {
            if (cl.contains('in-call')) {
              cl.remove('in-call');
            }
            Stadium.Instance.Hub.popOutConversation(this.View);
          }
        }
        break;
      case "U+0056":
      case "v":
        if (this._conversation != null) {
          this._conversation._playParticipantVideo();
        }
      }
    };
    return ConversationResponder;
  }(events.MxWithEvents, history.MxWithHistoryList, video.MxWithFullscreen));
  Instance = new ConversationResponder();
  module.exports = {
    Instance: Instance
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
