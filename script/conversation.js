// Generated by LiveScript 1.2.0
(function(){
  var _, history, debug, events, __cid, Conversation;
  _ = require('prelude-ls');
  history = require('./history.js');
  debug = require('./debug.js');
  events = require('./events.js');
  __cid = 0;
  Conversation = (function(){
    Conversation.displayName = 'Conversation';
    var prototype = Conversation.prototype, constructor = Conversation;
    importAll$(prototype, arguments[0]);
    function Conversation(){
      this.__playParticipantVideo = bind$(this, '__playParticipantVideo', prototype);
      this.addParticipant = bind$(this, 'addParticipant', prototype);
      this._listeners = {};
      this.participants = [];
      this.History = new history.History();
      this.name = null;
      this.image = "./img/PictureContact160_trans@2x.png";
      this.contactMood = "designing";
      this._lastMessage = null;
      this._identity = "convo_" + (__cid++);
      Object.defineProperties(this, {
        LastMessage: {
          enumerable: true,
          get: function(){
            if (!this._lastMessage) {
              this._lastMessage = debug.CreateRandomMessage();
            }
            return this._lastMessage;
          }
        }
      });
    }
    prototype.addParticipant = function(participant){
      this.participants.push(participant);
      if (this.name != null) {
        this.name = [this.name, participant.name].join(',');
      } else {
        this.name = participant.name;
      }
      this.fireEvent('name_changed', this.name);
      if (this.participants.length === 1) {
        this.image = this.participants[0].avatar;
        this.fireEvent('image_changed', this.image);
      }
      this.fireEvent('participant_arrived', participant);
    };
    prototype.__playParticipantVideo = function(){
      var p;
      p = _.find(function(it){
        return it.remoteVideos[0].Playing === false;
      }, this.participants);
      if (p == null) {
        console.warn("All participants are playing videos");
        return;
      }
      p.playVideo();
      return this.fireEvent('gained_participant_video', p);
    };
    return Conversation;
  }(events.MxWithEvents));
  module.exports = {
    Conversation: Conversation
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
