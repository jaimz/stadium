// Generated by LiveScript 1.2.0
(function(){
  var util, AppNavResponder;
  util = require('./util.js');
  AppNavResponder = (function(){
    AppNavResponder.displayName = 'AppNavResponder';
    var prototype = AppNavResponder.prototype, constructor = AppNavResponder;
    function AppNavResponder(view){
      view == null && (view = "app_navigation");
      this.toggleAppMenu = bind$(this, 'toggleAppMenu', prototype);
      this.click = bind$(this, 'click', prototype);
      this._view = null;
      Object.defineProperties(this, {
        View: {
          get: function(){
            return this._view;
          },
          set: function(v){
            if (this._view != null) {
              this.losingView();
            }
            this._view = util.getEl(v);
            return this.initView();
          }
        }
      });
      this._cmds = {
        'toggleAppMenu': this.toggleAppMenu
      };
      this.View = view;
    }
    prototype.initView = function(){
      if (this._view == null) {
        return;
      }
      this._view.addEventListener('click', this.click);
    };
    prototype.losingView = function(){
      this._view.removeEventListener('click', this.click);
    };
    prototype.click = function(e){
      var src, cmd;
      src = e.target;
      cmd = src.getAttribute('data-nav-cmd');
      if (cmd == null) {
        console.warn("No nav cmd on nav event source");
        return;
      }
      if (cmd in this._cmds) {
        this._cmds[cmd].call();
      }
    };
    prototype.toggleAppMenu = function(){
      Stadium.ToggleAppMenu();
    };
    return AppNavResponder;
  }());
  module.exports = {
    Responder: AppNavResponder
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
