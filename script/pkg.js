(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var util, Responder;
  util = require('./util.js');
  Responder = (function(){
    Responder.displayName = 'Responder';
    var prototype = Responder.prototype, constructor = Responder;
    function Responder(View, Hub){
      var ref$;
      this.View = View;
      this.Hub = Hub;
      this.keyup = bind$(this, 'keyup', prototype);
      this._activateSelection = bind$(this, '_activateSelection', prototype);
      this._calculateHubScroll = bind$(this, '_calculateHubScroll', prototype);
      this._focusChange = bind$(this, '_focusChange', prototype);
      this._moveFocusVertical = bind$(this, '_moveFocusVertical', prototype);
      this._changeFocusParent = bind$(this, '_changeFocusParent', prototype);
      this._moveFocus = bind$(this, '_moveFocus', prototype);
      this._changeFocus = bind$(this, '_changeFocus', prototype);
      this._removeConvoItem = bind$(this, '_removeConvoItem', prototype);
      this._createConvoItem = bind$(this, '_createConvoItem', prototype);
      this._generateAllConvoItems = bind$(this, '_generateAllConvoItems', prototype);
      this.willLoseFirstResponder = bind$(this, 'willLoseFirstResponder', prototype);
      this.willBecomeFirstResponder = bind$(this, 'willBecomeFirstResponder', prototype);
      this._hubView = this.Hub.View;
      this._hubEL = document.getElementById('hub');
      this._generateAllConvoItems();
      this._items = this.View.getElementsByClassName('app-menu-item');
      this._focus = this.View.querySelector('.focused');
      this._focusIdx = util.indexOfElement(this._focus);
      this._focusParent = (ref$ = this._focus) != null
        ? ref$
        : {
          parentElement: this._focus[null]
        };
      this._active = false;
      this._hubOffset = 0;
    }
    prototype.willBecomeFirstResponder = function(){
      this._active = true;
    };
    prototype.willLoseFirstResponder = function(){
      var s;
      this._active = false;
      s = Stadium.Hub.View.style;
      s.removeProperty('transform');
      s.removeProperty('-webkit-transform');
    };
    prototype._generateAllConvoItems = function(){
      var i$, ref$, len$, c;
      for (i$ = 0, len$ = (ref$ = this.Hub.ActiveConversations).length; i$ < len$; ++i$) {
        c = ref$[i$];
        this._createConvoItem(c);
      }
    };
    prototype._createConvoItem = function(convo){
      var item;
      item = util.make('div', ['app-menu-item', 'location'], this.View, convo.name);
      item.setAttribute("data-convo-id", convo.identity);
      this._changeFocus(item);
    };
    prototype._removeConvoItem = function(convo){
      var item;
      item = this.View.querySelector(".app-menu-item[data-convo-id=" + convo.identity + "]");
      if (item != null) {
        if (item.classList.contains('focused')) {
          this._changeFocus(this.View.children[2]);
        }
        this.View.removeChild(item);
      }
    };
    prototype._changeFocus = function(){
      if (item.parentElement !== this._focusParent) {
        this._focusParent = item.parentElement;
      }
      if (this._focus) {
        this._focus.classList.remove('focused');
      }
      this._focusIdx = SkIndexOfElement(item);
      this._focus = item;
      this._focus.classList.add('focused');
      this._focusChange(this._focus);
    };
    prototype._moveFocus = function(){
      var focusParent, children, newFocusIdx;
      focusParent = this._focusParent;
      if (!focusParent) {
        return;
      }
      children = focusParent.children;
      newFocusIdx = this._focusIdx + delta;
      if (newFocusIdx >= 0 && newFocusIdx < children.length) {
        this._focusIdx = newFocusIdx;
        if (this._focus) {
          this._focus.classList.remove('focused');
        }
        this._focus = children[newFocusIdx];
        this._focus.classList.add('focused');
        this._focusChange(this._focus);
      }
    };
    prototype._changeFocusParent = function(newParent){
      var children, l;
      if (newParent === this._focusParent) {
        return;
      }
      if (this._focus != null) {
        this._focus.classList.remove('focused');
      }
      this._focusParent = newParent;
      children = newParent.children;
      l = children.length;
      if (l > 0) {
        this._focusIdx = 0;
        this._focus = children[0];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocusVertical = function(delta){
      if (deepEq$(this._focusParent, this._view, '===') || deepEq$(this._focusParent, this._hubEl, '===')) {
        this._moveFocus(delta);
      } else {
        console.warn("Don't know how to move focus for: " + this._focusParent);
      }
    };
    prototype._focusChange = function(newFocus){
      if (newFocus.classList.contains('location') === false) {
        return;
      }
      this._calculateHubScroll();
    };
    prototype._calculateHubScroll = function(){
      var locIdx, offs, s;
      locIdx = this._focusIdx - 2;
      offs = 700 * locIdx;
      if (locIdx > 0) {
        offs += 20;
      }
      this.hubOffset = 0 - offs;
      if (this._active) {
        s = Stadium.Hub.View.style;
        if (this.hubOffset !== 0) {
          s.webkitTransform = ['transdisalateY(', this.hubOffset, 'px)'].join('');
          s.transform = ['translateY(', this.hubOffset, 'px)'].join('');
        } else {
          s.removeProperty('transform');
          s.removeProperty('-webkit-transform');
        }
      }
    };
    prototype._activateSelection = function(){
      var location;
      if (this._focus.classList.contains('location')) {
        location = this._focus.getAttribute('data-convo-id');
        Stadium.HideAppMenu(location);
      }
    };
    prototype.keyup = function(){
      var result;
      result = true;
      switch (e.skKey) {
      case "Up":
        this._moveFocusVertical2(-1);
        break;
      case "Down":
        this._moveFocusVertical2(1);
        break;
      case "Enter":
      case "Activate":
        this._activateSelection();
        break;
      default:
        result = false;
      }
      result;
    };
    return Responder;
  }());
  module.exports = {
    Responder: Responder
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) { 
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);

},{"./util.js":22}],2:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var util, AppNavResponder;
  util = require('./util.js');
  AppNavResponder = (function(){
    AppNavResponder.displayName = 'AppNavResponder';
    var prototype = AppNavResponder.prototype, constructor = AppNavResponder;
    function AppNavResponder(view){
      view == null && (view = "app_navigation");
      this.toggleAppMenu = bind$(this, 'toggleAppMenu', prototype);
      this.click = bind$(this, 'click', prototype);
      this._view = null;
      Object.defineProperties(this, {
        View: {
          get: function(){
            return this._view;
          },
          set: function(v){
            if (this._view != null) {
              this.losingView();
            }
            this._view = util.getEl(v);
            return this.initView();
          }
        }
      });
      this._cmds = {
        'toggleAppMenu': this.toggleAppMenu
      };
      this.View = view;
    }
    prototype.initView = function(){
      if (this._view == null) {
        return;
      }
      this._view.addEventListener('click', this.click);
    };
    prototype.losingView = function(){
      this._view.removeEventListener('click', this.click);
    };
    prototype.click = function(e){
      var src, cmd;
      src = e.target;
      cmd = src.getAttribute('data-nav-cmd');
      if (cmd == null) {
        console.warn("No nav cmd on nav event source");
        return;
      }
      if (cmd in this._cmds) {
        this._cmds[cmd].call();
      }
    };
    prototype.toggleAppMenu = function(){
      Stadium.ToggleAppMenu();
    };
    return AppNavResponder;
  }());
  module.exports = {
    Responder: AppNavResponder
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{"./util.js":22}],3:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var _, history, debug, events, __cid, Conversation;
  _ = require('prelude-ls');
  history = require('./history.js');
  debug = require('./debug.js');
  events = require('./events.js');
  __cid = 0;
  Conversation = (function(){
    Conversation.displayName = 'Conversation';
    var prototype = Conversation.prototype, constructor = Conversation;
    importAll$(prototype, arguments[0]);
    function Conversation(){
      this.__playParticipantVideo = bind$(this, '__playParticipantVideo', prototype);
      this.addParticipant = bind$(this, 'addParticipant', prototype);
      this._listeners = {};
      this.participants = [];
      this.History = new history.History();
      this.name = null;
      this.image = "./img/PictureContact160_trans@2x.png";
      this.contactMood = "designing";
      this._lastMessage = null;
      this._identity = "convo_" + (__cid++);
      Object.defineProperties(this, {
        LastMessage: {
          enumerable: true,
          get: function(){
            if (!this._lastMessage) {
              this._lastMessage = debug.CreateRandomMessage();
            }
            return this._lastMessage;
          }
        }
      });
    }
    prototype.addParticipant = function(participant){
      this.participants.push(participant);
      if (this.name != null) {
        this.name = [this.name, participant.name].join(',');
      } else {
        this.name = participant.name;
      }
      this.fireEvent('name_changed', this.name);
      if (this.participants.length === 1) {
        this.image = this.participants[0].avatar;
        this.fireEvent('image_changed', this.image);
      }
      this.fireEvent('participant_arrived', participant);
    };
    prototype.__playParticipantVideo = function(){
      var p;
      p = _.find(function(it){
        return it.remoteVideos[0].Playing === false;
      }, this.participants);
      if (p == null) {
        console.warn("All participants are playing videos");
        return;
      }
      p.playVideo();
      return this.fireEvent('gained_participant_video', p);
    };
    return Conversation;
  }(events.MxWithEvents));
  module.exports = {
    Conversation: Conversation
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./debug.js":5,"./events.js":8,"./history.js":9,"prelude-ls":16}],4:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var _, events, history, video, ConversationResponder, Instance;
  _ = require('prelude-ls');
  events = require('./events.js');
  history = require('./history.js');
  video = require('./video.js');
  /*
    This responder handles interaction with a conversation
    view in both call and non-call modes
  */
  ConversationResponder = (function(){
    ConversationResponder.displayName = 'ConversationResponder';
    var prototype = ConversationResponder.prototype, constructor = ConversationResponder;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    importAll$(prototype, arguments[2]);
    function ConversationResponder(){
      this.keyup = bind$(this, 'keyup', prototype);
      this._calculateGroupStatus = bind$(this, '_calculateGroupStatus', prototype);
      this._dropVideoFromPanel = bind$(this, '_dropVideoFromPanel', prototype);
      this._addNewVideos = bind$(this, '_addNewVideos', prototype);
      this._lostParticipantVideo = bind$(this, '_lostParticipantVideo', prototype);
      this._gainedParticipantVideo = bind$(this, '_gainedParticipantVideo', prototype);
      this._participantLeft = bind$(this, '_participantLeft', prototype);
      this._participantArrived = bind$(this, '_participantArrived', prototype);
      this._participantsChanged = bind$(this, '_participantsChanged', prototype);
      this._getPanelForParticipant = bind$(this, '_getPanelForParticipant', prototype);
      this._createPanelForParticipant = bind$(this, '_createPanelForParticipant', prototype);
      this._activateSelection = bind$(this, '_activateSelection', prototype);
      this._moveFocusHorizontal = bind$(this, '_moveFocusHorizontal', prototype);
      this._moveFocusVertical = bind$(this, '_moveFocusVertical', prototype);
      this._moveFocus = bind$(this, '_moveFocus', prototype);
      this._changeFocusParent = bind$(this, '_changeFocusParent', prototype);
      this.__makeCallDebug = bind$(this, '__makeCallDebug', prototype);
      this._initCommands = bind$(this, '_initCommands', prototype);
      this._dontListen = bind$(this, '_dontListen', prototype);
      this._listen = bind$(this, '_listen', prototype);
      this._unloadConversation = bind$(this, '_unloadConversation', prototype);
      this._inspectConversation = bind$(this, '_inspectConversation', prototype);
      this._inspectView = bind$(this, '_inspectView', prototype);
      this._resetFocus = bind$(this, '_resetFocus', prototype);
      this._conversation = null;
      this._view = null;
      this._actions = null;
      this._callActions = null;
      this._resetFocus();
      this._allActions = null;
      this._commands = {};
      Object.defineProperties(this, {
        Conversation: {
          enumerable: true,
          set: function(v){
            if (this._conversation != null) {
              this._unloadConversation();
            }
            this._conversation = v || null;
            if (this._conversation != null) {
              return this._inspectConversation;
            }
          },
          get: function(){
            return this._conversation;
          }
        },
        View: {
          enumerable: true,
          set: function(v){
            this._view = v || null;
            this._resetFocus();
            return this._inspectView();
          }
        }
      });
      this._initCommands();
    }
    prototype._resetFocus = function(){
      this._focus = null;
      this._focusIdx = 0;
      this._focusParent = null;
    };
    prototype._inspectView = function(){
      this._convoActions = this._view.querySelector('.convo_actions');
      this._callActions = this._view.querySelector('.call_actions');
      this._participantContainer = this._view.querySelector('.participants');
      this._participantPanels = this._participantContainer.querySelectorAll('.participant');
      this._messages = this._view.querySelector('.messages');
      if (this._view.classList.contains("in-call")) {
        this._changeFocusParent(this._callActions);
      } else {
        this._changeFocusParent(this._convoActions);
      }
      this._deregisterEvents();
      this._allActions = this._view.querySelectorAll('.action');
      this._registerEvents();
    };
    prototype._inspectConversation = function(){
      var convo;
      convo = this.Conversation;
      convo.addEventListener('participants_changed', this._participantsChanged);
      convo.addEventListener('participant_arrived', this._participantArrived);
      convo.addEventListener('participant_left', this._participantLeft);
      convo.addEventListener('participant_voice_change', this._participantVoiceChange);
      convo.addEventListener('gained_participant_video', this._gainedParticipantVideo);
      convo.addEventListener('lost_participant_video', this._lostParticipantVideo);
      convo.History.addEventListener('messages_arrived', this._messagesArrived);
    };
    prototype._unloadConversation = function(){
      var convo;
      convo = this.Conversation;
      if (convo == null) {
        return;
      }
      convo.addEventListener('participants_changed', this._participantsChanged);
      convo.addEventListener('participant_arrived', this._participantArrived);
      convo.addEventListener('participant_left', this._participantLeft);
      convo.addEventListener('participant_voice_change', this._participantVoiceChange);
      convo.addEventListener('gained_participant_video', this._gainedParticipantVideo);
      convo.addEventListener('lost_participant_video', this._lostParticipantVideo);
      convo.History.addEventListener('messages_arrived', this._messagesArrived);
    };
    prototype._listen = function(){
      var activateSelection;
      if (!(this._allActions && this._allActions.length > 0)) {
        return;
      }
      activateSelection = this._activateSelection;
      _.each(function(it){
        return it.addEventListener('click', activateSelection);
      }, this._allActions);
    };
    prototype._dontListen = function(){
      var activateSelection;
      if (!(this._allActions && this._allActions.length > 0)) {
        return;
      }
      activateSelection = this._activateSelection;
      _.each(function(it){
        return it.removeEventListener('click', activateSelection);
      }, this._allActions);
    };
    prototype._initCommands = function(){
      this._commands = {
        makeVideoCall: function(){
          return this.__makeCallDebug('video-call');
        },
        makeAudioCall: function(){
          return this.__makeCallDebug('audio-call');
        },
        endCall: function(){
          var cl, pc, c;
          cl = this._view.classList;
          cl.remove('calling');
          cl.remove('has-video');
          cl.remove('is-group');
          cl.remove('in-call');
          cl.remove('video-call');
          cl.remove('audio-call');
          pc = this._participantContainer;
          c = pc.children;
          while (c.length > 0) {
            pc.removeChild(c[0]);
          }
          return this._changeFocusParent(this._convoActions);
        },
        toggleIMs: function(){
          return this._view.classList.toggle('ims-visible');
        },
        addParticipant: function(){
          Stadium.Responders.PeoplePickerInstance.addDelegate(this);
          return Stadium.Instance.Hub.startParticipantPick();
        }
      };
    };
    prototype.__makeCallDebug = function(callType){
      var v, cl, convo, this$ = this;
      v = this._view;
      cl = v.classList;
      cl.add('calling');
      convo = this._conversation;
      setTimeout(function(){
        cl.remove("calling");
        cl.add("ringing");
        setTimeout(function(){
          cl.remove('ringing');
          cl.add('in-call');
          setTimeout(function(){
            var f;
            if (this$._participantPanels.length > 1) {
              cl.add('is-group');
              cl.add(callType);
              this$._changeFocusParent(this$._callActions);
              f = function(p){
                var panel;
                panel = this._createPanelForParticipant(p);
                this._participantContainer.appendChild(panel);
                this._calculateGroupStatus();
              };
              _.each(f, convo.participants);
            }
          }, 500);
        }, 2000);
      }, 1200);
    };
    prototype._changeFocusParent = function(newParent){
      var children, l;
      if (newParent === this._focusParent) {
        return;
      }
      if (this._focus != null) {
        this._focus.classList.remove('focused');
      }
      this._focusParent = newParent;
      children = newParent.children;
      l = children.length;
      if (l > 0) {
        this._focusIdx = 0;
        this._focus = children[0];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocus = function(delta){
      var focusParent, children, newFocusIdx;
      focusParent = this._focusParent;
      if (focusParent == null) {
        return;
      }
      children = focusParent.children;
      newFocusIdx = this._focusIdx + delta;
      if (newFocusIdx >= 0 && newFocusIdx < children.length) {
        this._focusIdx = newFocusIdx;
        if (this._focus) {
          this._focus.classList.remove('focused');
        }
        this._focus = children[newFocusIdx];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocusVertical = function(delta){
      if (this._focusParent === this._convoActions) {
        this._moveFocus(delta);
      } else if (this._focusParent === this._callActions) {
        if (delta < 0) {
          if (this._participantPanels.length > 1) {
            this._changeFocusParent(this._participantContainer);
          }
        }
      } else if (this._focusParent === this._participantContainer) {
        if (delta > 0) {
          this._changeFocusParent(this._callActions);
        }
      }
    };
    prototype._moveFocusHorizontal = function(delta){
      this._moveFocus(delta);
    };
    prototype._activateSelection = function(e){
      var selection, selectionType, cmdId;
      selection = e != null
        ? e
        : {
          currentTarget: e[this._focus]
        };
      if (selection == null) {
        return;
      }
      selectionType = selection.classList[0];
      switch (selectionType) {
      case "action":
        cmdId = selection.getAttribute('data-cmd-id');
        if (cmdId != null && cmdId(id(this._commands))) {
          this._commands[cmdId].call(this, this.Conversation, this.View);
        }
        break;
      case "participant":
        this._toggleFullscreen(selection);
        break;
      }
      if (e != null) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
    prototype._createPanelForParticipant = function(participant){
      var pTag, avatar, name, l, cl;
      pTag = util.make('div', 'participant');
      pTag.setAttribute('data-id', participant.identifier);
      avatar = util.make('div', 'avatar', pTag);
      if (participant.avatar != null) {
        avatar.style.backgroundImage = "url(" + participant.avatar + ")";
      }
      name = util.make('div', 'name', avatar, participant.name || "");
      this._participantPanels = this._participantContainer.querySelectorAll('.participant');
      l = this._participantPanels.length;
      cl = this._view.classList;
      if (l > 1) {
        if (cl.contains('is-group') === false) {
          cl.add('is-group');
        }
        if (l > 2) {
          cl.add('three-group');
        } else {
          cl.remove('three-group');
        }
      } else {
        cl.remove('is-group');
      }
      return pTag;
    };
    prototype._getPanelForParticipant = function(participants){
      return _.find(function(panel){
        return panel.getAttribute('data-id') === participant.identifier;
      }, this._participantPanels);
    };
    prototype._participantsChanged = function(participants){
      var rm_fn, add_fn, this$ = this;
      rm_fn = function(panel){
        this$._participantContainer.removeChild(panel);
      };
      _.each(rm_fn, this._participantPanels);
      add_fn = function(participant){
        this$._participantContainer.appendChild(this$._createPanelForParticipant(participant));
      };
      _.each(add_fn, participants);
      this._calculateGroupStatus();
    };
    prototype._participantArrived = function(participant){
      this._participantContainer.appendChild(this._createPanelForParticipant(participant));
      this._calculateGroupStatus();
    };
    prototype._participantLeft = function(participant){
      var panel, pcl, v, vcl, this$ = this;
      panel = this._getPanelForParticipant(participant);
      if (panel == null) {
        console.warn("Could not find panel for participant " + participant.identifier);
        return;
      }
      pcl = panel.classList;
      v = this._view;
      vcl = v.classList;
      if (pcl.contains('with-video')) {
        this._dropVideoFromPanel(panel);
      }
      pcl.add('lost');
      setTimeout(function(){
        this$._participantContainer.removeChild(panel);
        this$._calculateGroupStatus();
      }, 1000);
    };
    prototype._gainedParticipantVideo = function(participant){
      var panel, videos, videoTags;
      panel = this._getPanelForParticipant(participant);
      if (!panel) {
        console.warn("Could not get panel for: " + participant.identifier);
        return;
      }
      videos = participant.remoteVideos;
      if (videos == null) {
        return;
      }
      videoTags = panel.getElementsByTagName('video');
      this._addNewVideos(panel, videoTags, videos);
    };
    prototype._lostParticipantVideo = function(participant){
      var panel;
      panel = this._getPanelForParticipant(participant);
      if (panel == null) {
        console.warn("Could not get panel for " + participant.identifier);
        return;
      }
      this._dropVideoFromPanel(panel);
    };
    prototype._addNewVideos = function(panel, videoTags, remoteVideos){
      var addedVideos;
      addedVideos = _.each(function(rv){
        var t;
        t = rv.VideoTag;
        t.classList.add('video-feed');
        t.setAttribute('data-vid-id', rv.identifier);
        return panel.insertBefore(t, videoTags[0]);
      })(
      _.filter(function(rv){
        return _.find(function(it){
          return it.getAttribute('data-vid-id' === rv.identifier);
        }) == null;
      })(
      _.filter(function(it){
        return it.Playing === true;
      })(
      remoteVideos)));
      if (addedVideos.length > 0) {
        if (this._view.classList.contains('has-video') === false) {
          this._view.classList.add('has-video');
        }
        return setTimeout(function(){
          var i$, ref$, len$, v, results$ = [];
          for (i$ = 0, len$ = (ref$ = addedVideos).length; i$ < len$; ++i$) {
            v = ref$[i$];
            results$.push(v.VideoTag.play());
          }
          return results$;
        }, 0);
      }
    };
    prototype._dropVideoFromPanel = function(panel){};
    prototype._calculateGroupStatus = function(){
      var l, cl, this$ = this;
      this._participantPanels = this._participantContainer.querySelectorAll('.participant');
      l = this._participantPanels.length;
      cl = this._view.classList;
      if (l < 2) {
        cl.remove('is-group');
      } else {
        if (!cl.contains('is-group')) {
          setTimeout(function(){
            cl.add('is-group');
          }, 200);
        }
        if (l > 2) {
          if (!cl.contains('three-group')) {
            setTimeout(function(){
              cl.add('three-group');
            }, 250);
          } else {
            setTimeout(function(){
              cl.remove('three-group');
            }, 250);
          }
        } else {
          if (cl.contains('three-group')) {
            setTimeout(function(){
              cl.remove('three-group');
            }, 200);
          }
        }
      }
    };
    prototype.keyup = function(e){
      var cl;
      if (!(this.View != null && this.Conversation != null)) {
        return;
      }
      switch (e.stKey) {
      case "Up":
        this._moveFocusVertical(-1);
        break;
      case "Down":
        this._moveFocusVertical(1);
        break;
      case "Left":
        this._moveFocusHorizontal(-1);
        break;
      case "Right":
        this._moveFocusHorizontal(1);
        break;
      case "Enter":
      case "Activate":
        this._activateSelection();
        break;
      case "Back":
        if (this.View != null) {
          cl = this.View.classList;
          if (cl.contains('ims-visible')) {
            cl.remove('ims-visible');
          } else {
            if (cl.contains('in-call')) {
              cl.remove('in-call');
            }
            Stadium.Instance.Hub.popOutConversation(this.View);
          }
        }
        break;
      case "U+0056":
      case "v":
        if (this._conversation != null) {
          this._conversation._playParticipantVideo();
        }
      }
    };
    return ConversationResponder;
  }(events.MxWithEvents, history.MxWithHistoryList, video.MxWithFullscreen));
  Instance = new ConversationResponder();
  module.exports = {
    Instance: Instance
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./events.js":8,"./history.js":9,"./video.js":23,"prelude-ls":16}],5:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var hourMillis, dayMillis, msgCount, __callback, __usrIdx, _randomiseTimestamp, _createMessage, _randomMessages;
  hourMillis = 60 * 60 * 1000;
  dayMillis = 24 * hourMillis;
  msgCount = 0;
  __callback = null;
  __usrIdx = 1;
  _randomiseTimestamp = function(original){
    var dayShift, hourShift;
    dayShift = Math.floor(Math.random() * 4);
    hourShift = Math.floor(Math.random() * 8);
    return original - dayShift * dayMillis;
  };
  _createMessage = function(){
    var contacts, userCount, userIdx, user, msgId, timestamp;
    contacts = Stadium.HubRepository._people;
    userCount = contacts.length;
    userIdx = Math.floor(Math.random() * 2);
    user = contacts[userIdx];
    msgId = msgCount++;
    timestamp = Date.now();
    if (Math.random() > 0.66) {
      timestamp = _randomiseTimestamp(timestamp);
    }
    return {
      userIdentifier: user.identifier,
      author: user.name,
      message: "This is the content of message  " + msgId + ", " + user.name,
      id: "message-" + msgId,
      timeStamp: timestamp
    };
  };
  _randomMessages = function(num, cb){
    var i$, i, results$ = [];
    for (i$ = 1; i$ <= num; ++i$) {
      i = i$;
      results$.push(cb());
    }
    return results$;
  };
  module.exports = {
    CreateRandomMessage: _createMessage,
    RandomMessages: _randomMessages
  };
}).call(this);

},{}],6:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var person, conversation, __names, kNumRecents, kNumFavourites, HubRepository;
  person = require('./person.js');
  conversation = require('./conversation.js');
  __names = ["Tatiana Toboeva", "Adrian O'Grady", "Misha Kalestki", "Rania Leliou", "Felicity Herst", "Warren Keyes", "James Ford", "Duncan Scott", "Catherine Vilhauer", "Ed Goward", "Richard Thorne", "Simon Hamilton", "Todd Roshak", "Eva Czekalska", "Gee Plumb", "Phillip Hounslow", "Ahmed Zaman", "Derek Lakin"];
  kNumRecents = 5;
  kNumFavourites = 7;
  HubRepository = (function(){
    HubRepository.displayName = 'HubRepository';
    var prototype = HubRepository.prototype, constructor = HubRepository;
    function HubRepository(){
      var res$, i$, ref$, len$, n, withAv, to$, i, pIdx, convo, p;
      this.RandomContact = bind$(this, 'RandomContact', prototype);
      this.CreateConvo = bind$(this, 'CreateConvo', prototype);
      this.FindConvo = bind$(this, 'FindConvo', prototype);
      this.FindPerson = bind$(this, 'FindPerson', prototype);
      this.Contacts = [];
      this.Recents = [];
      this.Favourites = [];
      this._convoMap = {};
      res$ = [];
      for (i$ = 0, len$ = (ref$ = __names).length; i$ < len$; ++i$) {
        n = ref$[i$];
        res$.push(new person.Person(n));
      }
      this._people = res$;
      withAv = new person.Person("James O'Brien");
      withAv.avatar = "./img/avatar.jpeg";
      this._people.unshift(withAv);
      for (i$ = 1, to$ = kNumRecents; i$ <= to$; ++i$) {
        i = i$;
        pIdx = Math.floor(Math.random(kNumRecents) * kNumRecents);
        convo = this.CreateConvo(this._people[pIdx]);
        this.Recents.push(convo);
      }
      for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
        i = ref$[i$];
        pIdx = Math.floor(Math.random(kNumRecents) * kNumRecents);
        convo = this.CreateConvo(this._people[pIdx]);
        this.Favourites.push(convo);
      }
      res$ = [];
      for (i$ = 0, len$ = (ref$ = this._people).length; i$ < len$; ++i$) {
        p = ref$[i$];
        res$.push(this.CreateConvo(p));
      }
      this.Contacts = res$;
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = kNumFavourites; i$ < to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
    }
    prototype.FindPerson = function(id){
      return _.find(function(c){
        return c.identity === id;
      }, this.Contacts);
    };
    prototype.FindConvo = function(id){
      return this._convoMap[id] || null;
    };
    prototype.CreateConvo = function(person){
      var convo;
      person == null && (person = null);
      convo = new conversation.Conversation();
      this._convoMap[convo.identity] = convo;
      if (person != null) {
        convo.addParticipant(person);
      }
      return convo;
    };
    prototype.RandomContact = function(){
      var l, r, i;
      l = this._people.length;
      r = Math.random();
      i = Math.floor(l * r);
      return this._people[i];
    };
    return HubRepository;
  }());
  module.exports = {
    Repository: HubRepository
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{"./conversation.js":3,"./person.js":18}],7:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var _, delegate, WithDelegation, slice$ = [].slice;
  _ = require('prelude-ls');
  delegate = function(delegates, fnName){
    var params, i$, len$, d, results$ = [];
    delegates == null && (delegates = []);
    fnName == null && (fnName = 'delegate');
    params = slice$.call(arguments, 2);
    if (!(delegates && fnName)) {
      return;
    }
    for (i$ = 0, len$ = delegates.length; i$ < len$; ++i$) {
      d = delegates[i$];
      if (_.isType('Function', d[fnName])) {
        results$.push(d[fnName].apply(d, params));
      }
    }
    return results$;
  };
  WithDelegation = {
    addDelegate: function(d){
      if (this.delegates == null) {
        this.delegates = [];
      }
      if (_.isType('Object', d)) {
        return this.delegates.push(d);
      }
    },
    removeDelegate: function(d){
      var i;
      i = this.delegates.indexOf(d);
      if (i !== -1) {
        return this.delegates.splice(i, 1);
      }
    },
    callDelegate: function(fnName){
      var params;
      fnName == null && (fnName = 'delegate');
      params = slice$.call(arguments, 1);
      if (this.delegates != null && this.delegates.length > 0) {
        return delegate.apply(null, [this.delegates, fnName].concat(slice$.call(params)));
      }
    }
  };
  module.exports = {
    WithDelegation: WithDelegation
  };
}).call(this);

},{"prelude-ls":16}],8:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var _, MxWithEvents, this$ = this;
  _ = require('prelude-ls');
  MxWithEvents = {
    addEventListener: function(eventName, listener){
      var listenerTable, listeners;
      if (!_.isType('Function', listener)) {
        console.warn("Non-function passed to add-event-listener");
        console.warn(listener);
        return;
      }
      listenerTable = this$.listenerTable;
      if (listenerTable == null) {
        listenerTable = {};
        this$.listenerTable = listenerTable;
      }
      if (!(eventName in listenerTable)) {
        listeners = [];
        listenerTable[eventName] = listeners;
      } else {
        listeners = listenerTable[eventName];
      }
      listeners.push(listener);
    },
    removeEventListener: function(eventName, listener){
      var listeners, idx;
      if (!(this$.listenerTable && eventName in this$.listenerTable)) {
        return;
      }
      listeners = this$.listenerTable[eventName];
      idx = _.elemIdx(listener, listeners);
      if (idx != null) {
        listeners.splice(idx, 1);
      }
    },
    fireEvent: function(eventName, arg){
      var listeners;
      if (!(this$.listenerTable != null && eventName in this$.listenerTable)) {
        return;
      }
      listeners = this$.listenerTable[eventName];
      return _.each(function(it){
        return it.call(this, arg);
      }, listeners);
    }
  };
  module.exports = {
    MxWithEvents: MxWithEvents
  };
}).call(this);

},{"prelude-ls":16}],9:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var util, events, debug, __d, MxWithHistoryList, twoMinuteMillis, __getDayStampOfMessage, __pushChange, __sermonMessageCmp, __msgCmp, __stampDayCmp, Sermon, Day, History, this$ = this;
  util = require('./util.js');
  events = require('./events.js');
  debug = require('./debug.js');
  __d = new Date();
  MxWithHistoryList = {
    /* We currently re-render a whole day when we detect the
         first modification to that day.
         This removes subsequent modifications to a  day since they
         will have already been rendered */
    cleanLog: function(indicies, opers, dayIdx, fromIdx){
      var l, idx, removed;
      l = indicies.length;
      idx = fromIdx;
      removed = 0;
      while (idx < l) {
        if (indicies[idx] === dayIdx) {
          if (opers[idx] === 'i') {
            break;
          } else if (opers[idx] === 'm') {
            indicies.splice(idx, 1);
            opers.splice(idx, 1);
            l = indicies.length;
            removed += 1;
          } else {
            idx += 1;
          }
        } else {
          idx += 1;
        }
      }
      return removed;
    },
    mapDayIdx: function(dayIdx, indicies, opers, fromIdx){
      var idx, result, l;
      idx = fromIdx + 1;
      result = dayIdx;
      l = indicies.length;
      while (idx < l) {
        if (indicies[idx] <= result) {
          if (opers[idx] === 'i') {
            result += 1;
          }
        }
        idx += 1;
      }
      return result;
    },
    replayChanges: function(log){
      var indicies, opers, l, idx, dayIdx, dayDataIdx, oper, dayPanels, i$, len$, p;
      indicies = log.i;
      opers = log.o;
      l = indicies.length;
      if (opers.length !== l) {
        console.warn('Opers and Indicies lengths do not match');
        return;
      }
      idx = 0;
      dayIdx = -1;
      dayDataIdx = -1;
      oper = null;
      dayPanels = this$._messages.getElementsByClassName('day');
      while (idx < l) {
        dayIdx = indicies[idx];
        dayDataIdx = this$._mapDayIdx(dayIdx, indicies, opers, idx);
        oper = opers[idx];
        if (oper === 'i') {
          for (i$ = 0, len$ = dayPanels.length; i$ < len$; ++i$) {
            p = dayPanels[i$];
            if (p.children.length === 1) {
              console.log('screwed up');
              console.log('i: ' + log.i.join(','));
              console.log('o: ' + log.o.join(','));
            }
          }
        }
        this$._replay(dayIdx, dayDataIdx, indicies, oper, dayPanels);
        if (oper === 'm') {
          l -= this$._cleanLog(indicies, opers, dayIdx, idx + 1);
        }
        idx += 1;
      }
    },
    replay: function(dayIdx, dayDataIdx, indicies, oper, dayPanels){
      var day, messages, panelIdx, newDayPanel, existingDayPanel, ref$;
      day = this$._conversation.History.Days[dayDataIdx];
      messages = this$._messages;
      panelIdx = (dayPanels.length - 1) - dayIdx;
      switch (oper) {
      case "m":
        this$._reRenderDay(day, dayPanels[panelIdx]);
        break;
      case "i":
        newDayPanel = this$._createPanelForDay(day);
        if (dayPanels.length > 0) {
          if (panelIdx < dayPanels.length) {
            existingDayPanel = (ref$ = panelIdx >= 0) != null
              ? ref$
              : dayPanels[panelIdx]((function(){
                dayPanels: return [0];
              }()));
            messages.insertBefore(newDayPanel, existingDayPanel);
          } else {
            messages.appendChild(newDayPanel);
          }
        } else {
          messages.appendChild(newDayPanel);
        }
        break;
      default:
        console.error("Don't recognise operation: " + currOper);
      }
    },
    _createPanelForDay: function(day){
      var panel, dayStamp, dateStr;
      panel = util.make("div", "day");
      panel.setAttribute('data-stamp', day.timeStamp + "");
      dayStamp = util.make('div', 'daystamp');
      __d.setTime(day.timeStamp);
      dateStr = __d.toDateString();
      dateStr = dateStr.substring(0, dateStr.length - 5);
      dayStamp = util.make("div", "daystamp", panel, dayStr);
      return panel;
    },
    _reRenderDay: function(day, dayPanel){
      var sermonPanels, changes, indicies, opers, currIdx, currOper, sermons, sermon, existingSermonPanel, newSermonPanel, l, i$, to$, i;
      sermonPanels = dayPanel.getElementsByClassName('sermon');
      changes = day.changes;
      indicies = changes.i;
      opers = changes.o;
      if (indicies.length !== opers.length) {
        console.error("Length mis-match between opers and indicies");
        return;
      }
      currIdx = -1;
      currOper = null;
      sermons = day.sermons;
      sermon = null;
      existingSermonPanel = null;
      newSermonPanel = null;
      l = indicies.length;
      for (i$ = 0, to$ = l - 1; i$ <= to$; ++i$) {
        i = i$;
        currIdx = indicies[i];
        currOper = opers[i];
        sermon = sermons[currIdx];
        switch (currOper) {
        case 'm':
          this$._reRenderSermon(sermon, sermonPanels[currIdx]);
          break;
        case 'i':
          newSermonPanel = this$._createSermonPanel(sermon);
          if (currIdx < sermonPanels.length) {
            existingSermonPanel = sermonPanels[currIdx];
            dayPanel.insertBefore(newSermonPanel, existingSermonPanel);
          } else {
            dayPanel.appendChild(newSermonPanel);
          }
          break;
        default:
          console.warn("Don't know what to do with operation: " + currOper);
        }
      }
      if (dayPanel.children.length === 1) {
        console.log('screwed up day');
        console.log('i: ' + changes.i.join(','));
        console.log('o: ' + changes.o.join(','));
      }
      day.clearChanges();
    }
    /*
      Create DOM to represent a 'sermon' (a continuous collection of
      messages from the same user)
    */,
    _createSermonPanel: function(sermon){
      var messages, result, avatar, timeStamp, content, msgs_content, author, i$, len$, message;
      messages = sermon.messages;
      result = util.make('div', 'sermon');
      avatar = util.make('div', 'msg_avatar', result);
      avatar.style.backgroundImage = "url(" + (sermon.avatar || './img/PictureContact160_trans@2x.png') + ")";
      __d.setTime(messages[0].timeStamp);
      timeStamp = util.make('div', 'timestamp', result, __d.toTimeString().substring(0, 5));
      content = util.make('div', 'content', result);
      msgs_content = util.make('div', 'msgs_content', content);
      author = util.make('div', 'author', content, messages[0].author);
      for (i$ = 0, len$ = messages.length; i$ < len$; ++i$) {
        message = messages[i$];
        util.make('div', 'message', message.message, msg_content);
      }
      return result;
    },
    _reRenderSermon: function(sermon, sermonPanel){
      var messages, l, newContent, msgs_content, author, i$, len$, message, existingContent, stamp;
      messages = sermon.messages;
      l = messages.length;
      newContent = util.make('div', 'content');
      msgs_content = util.make('div', 'msgs_content', newContent);
      if (l > 0) {
        author = util.make('div', 'author', newContent, messages[0].author);
        for (i$ = 0, len$ = messages.length; i$ < len$; ++i$) {
          message = messages[i$];
          util.make('div', 'message', message.message, msg_content);
        }
      }
      existingContent = sermonPanel.getElementsByClassName('content');
      stamp = sermonPanel.getElementsByClassName('timestamp');
      while (existingContent.length > 0) {
        sermonPanel.removeChild(existingContent[0]);
      }
      if (stamp.length > 0) {
        sermonPanel.insertBefore(newContent, stamp[0]);
      } else {
        sermonPanel.appendChild(newContent);
      }
    }
  };
  twoMinuteMillis = 2 * 60 * 1000;
  __getDayStampOfMessage = function(message){
    __d.setTime(message.timeStamp);
    __d.setHours(0);
    __d.setMinutes(0);
    __d.setSeconds(0);
    __d.setMilliseconds(0);
    return __d.getTime();
  };
  __pushChange = function(changes, index, oper){
    var i, o, l;
    i = changes.i;
    o = changes.o;
    l = i.length;
    if (o.length !== l) {
      console.error('Mis-matches lengths between opers and indicies!');
      return;
    }
    if (l > 0) {
      if (i[l - 1] === index && o[l - 1] === oper) {
        return;
      }
    }
    i.push(index);
    return o.push(oper);
  };
  __sermonMessageCmp = function(message, sermon){
    return sermon.timeStamp - message.timeStamp;
  };
  __msgCmp = function(first, second){
    return first.timeStamp - second.timeStamp;
  };
  __stampDayCmp = function(dayStamp, day){
    return dayStamp - day.timeStamp;
  };
  Sermon = (function(){
    Sermon.displayName = 'Sermon';
    var prototype = Sermon.prototype, constructor = Sermon;
    function Sermon(message){
      this.append = bind$(this, 'append', prototype);
      this.insert = bind$(this, 'insert', prototype);
      Object.defineProperties(this, {
        messages: {
          value: [message],
          writable: true,
          enumerable: true
        },
        userId: {
          value: message.userIdentifier,
          writable: true,
          enumerable: true
        },
        userName: {
          value: message.userName,
          writable: true,
          enumerable: true
        },
        avatar: {
          value: "./img/PictureContact160_trans@2x.png",
          writable: true,
          enumerable: true
        },
        timeStamp: {
          value: message.timeStamp,
          writable: true,
          enumerable: true
        }
      });
    }
    prototype.insert = function(message){
      var messages, i;
      messages = this.messages;
      i = util.insertionIndexFor(message, messages, __msgCmp);
      if (i < messages.length) {
        messages.splice(i, 0, message);
      } else {
        message.push(message);
      }
    };
    prototype.append = function(message){
      return this.messages.push(message);
    };
    return Sermon;
  }());
  Day = (function(){
    Day.displayName = 'Day';
    var prototype = Day.prototype, constructor = Day;
    function Day(){
      this.clearChanges = bind$(this, 'clearChanges', prototype);
      this.insertMessages = bind$(this, 'insertMessages', prototype);
      this.insertMessage = bind$(this, 'insertMessage', prototype);
      Object.defineProperties(this, {
        sermons: {
          value: [],
          writable: true,
          enumerable: true
        },
        timeStamp: {
          value: null,
          writable: true,
          enumerable: true
        },
        changes: {
          value: {
            i: [],
            o: []
          },
          writable: true,
          enumerable: true
        }
      });
    }
    prototype.insertMessage = function(message){
      var idx, modifiedExisting, l, prevSermon, messageCount, prevMessage, sermon;
      idx = util.insertionIndexFor(message, this.sermons, __sermonMessageCmp);
      modifiedExisting = false;
      l = sermons.length;
      if (idx > -1) {
        if (idx > 0) {
          prevSermon = this.sermons[idx - 1];
          if (prevSermon.userId === message.userIdentifier) {
            messageCount = prevSermon.messages.length;
            prevMessage = prevSermon.messages[messageCount - 1];
            if (message.timeStamp - prevMessage.timeStamp < twoMinuteMillis) {
              idx -= 1;
              prevSermon.append(message);
              modifiedExisting = true;
            }
          }
          if (!modifiedExisting) {
            sermon = new Sermon(message);
            if (idx < l) {
              this.Sermons.splice(idx, 0, sermon);
            } else {
              this.Sermons.push(sermon);
            }
          }
          if (this.timeStamp == null) {
            this.timeStamp = __getDayStampOfMessage(message);
          }
        }
        __pushChange(this.changes, idx, modifiedExisting != null
          ? modifiedExisting
          : {
            'm': 'i'
          });
      }
    };
    prototype.insertMessages = function(messageCollection){
      var i$, len$, m;
      for (i$ = 0, len$ = messageCollection.length; i$ < len$; ++i$) {
        m = messageCollection[i$];
        this.insertMessage(m);
      }
    };
    prototype.clearChanges = function(){
      this.changes.i.splice(0);
      this.changes.o.splice(0);
    };
    return Day;
  }());
  History = (function(){
    History.displayName = 'History';
    var prototype = History.prototype, constructor = History;
    importAll$(prototype, arguments[0]);
    function History(){
      this.load = bind$(this, 'load', prototype);
      this.clearChanges = bind$(this, 'clearChanges', prototype);
      this._failedMessages = bind$(this, '_failedMessages', prototype);
      this._gotMessages = bind$(this, '_gotMessages', prototype);
      Object.defineProperties(this, {
        Days: {
          value: [],
          writable: true,
          enumerable: true
        },
        changes: {
          value: {
            i: [],
            o: []
          },
          writable: true,
          enumerable: true
        },
        earlistMessageTime: {
          value: Date.now(),
          writable: true,
          enumerable: true
        },
        targetMessageTime: {
          value: Date.now(),
          writable: true,
          enumerable: true
        },
        cache: {
          value: {},
          writable: true,
          enumerable: true
        }
      });
    }
    prototype._gotMessages = function(messages){
      var days, i$, len$, message, dayStamp, dayIdx, day;
      days = this.Days;
      for (i$ = 0, len$ = messages.length; i$ < len$; ++i$) {
        message = messages[i$];
        dayStamp = __getDayStampOfMessage(message);
        dayIdx = util.insertionIndexFor(dayStamp, days, __stampDayCmp);
        if (dayIdx > 0 && days[dayIdx - 1].timeStamp === dayStamp) {
          dayIdx -= 1;
          day = days[dayIdx];
          day.insertMessage(message);
          __pushChange(this.changes, dayIdx, 'm');
        } else {
          day = new Day();
          if (dayIdx < days.length) {
            days.splice(dayIdx, 0, day);
          } else {
            days.push(day);
          }
          __pushChange(this.changes, dayIdx, 'i');
          day.insertMessage(message);
          __pushChange(changes, dayIdx, 'm');
        }
      }
      if (messages.length > 0) {
        this.fireEvent('messages_arrived', this);
      }
    };
    prototype._failedMessages = function(error){
      console.error("Message load failed: " + error);
    };
    prototype.clearChanges = function(){
      var i$, ref$, len$, day;
      for (i$ = 0, len$ = (ref$ = this.Days).length; i$ < len$; ++i$) {
        day = ref$[i$];
        day.clearChanges();
      }
      this.changes.i.splice(0);
      this.changes.o.splice(0);
    };
    prototype.load = function(){
      debug.RandomMessages(10, this._gotMessages);
    };
    return History;
  }(events.MxWithEvents));
  module.exports = {
    MxWithHistoryList: MxWithHistoryList,
    History: History
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./debug.js":5,"./events.js":8,"./util.js":22}],10:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var util, events, ConvoResponder, PeoplePicker, kHubId, kConvoIdAtt, convoHolderZ, __makeConvoEl, __populateConvoPanel, Responder;
  util = require('./util.js');
  events = require('./events.js');
  ConvoResponder = require('./convo_responder.js');
  PeoplePicker = require('./people_picker.js');
  kHubId = '#hub';
  kConvoIdAtt = 'data-convo-id';
  convoHolderZ = 10;
  __makeConvoEl = function(convo, auxClasses){
    var mk, convoEl, i$, len$, c, cardInfo, convoActions, a, history, msgEd, msgInput, callActions;
    auxClasses == null && (auxClasses = ['card', 'minimised']);
    if (convo == null) {
      return null;
    }
    mk = util.make;
    convoEl = mk('div', 'conversation');
    for (i$ = 0, len$ = auxClasses.length; i$ < len$; ++i$) {
      c = auxClasses[i$];
      convoEl.classList.add(c);
    }
    convoEl.setAttribute('data-convo-id', convo.identity);
    mk('div', 'avatar', convoEl);
    mk('div', ['status_pip', 'online'], convoEl);
    cardInfo = mk('div', 'card_info', convoEl);
    mk('div', 'convo_name', cardInfo, convo.name);
    mk('div', 'last_message', cardInfo, convo.LastMessage);
    convoActions = mk('div', 'convo_actions', convoEl);
    a = mk('div', 'action', convoActions, 'call');
    a.setAttribute('data-cmd-id', 'makeVideoCall');
    a = mk('div', 'action', convoActions, 'voice call');
    a.setAttribute('data-cmd-id', 'makeAudioCall');
    a = mk('div', 'action', convoActions, 'add people');
    a.setAttribute('data-cmd-id', 'addParticipant');
    history = mk('div', 'history', convoEl);
    mk('div', 'messages', history);
    msgEd = mk('div', 'message_editor', history);
    msgInput = mk('input', 'message_input', msgEd);
    msgInput.setAttribute('type', 'text');
    callActions = mk('div', 'call_actions', convoEl);
    a = mk('div', 'action', callActions, 'add');
    a.setAttribute('data-cmd-id', 'addParticipant');
    a = mk('div', 'action', callActions, 'im');
    a.setAttribute('data-cmd-id', 'toggleIMs');
    a = mk('div', 'action', callActions, 'end');
    a.setAttribute('data-cmd-id', 'endCall');
    return convoEl;
  };
  __populateConvoPanel = function(panel, convos){
    var i$, len$, convo, e, results$ = [];
    for (i$ = 0, len$ = convos.length; i$ < len$; ++i$) {
      convo = convos[i$];
      e = __makeConvoEl(convo);
      if (e != null) {
        results$.push(panel.appendChild(e));
      }
    }
    return results$;
  };
  Responder = (function(){
    Responder.displayName = 'Responder';
    var prototype = Responder.prototype, constructor = Responder;
    importAll$(prototype, arguments[0]);
    function Responder(el){
      el == null && (el = kHubId);
      this._popOutConversation = bind$(this, '_popOutConversation', prototype);
      this._popInConversation = bind$(this, '_popInConversation', prototype);
      this._setupMinimisedDrag = bind$(this, '_setupMinimisedDrag', prototype);
      this._held = bind$(this, '_held', prototype);
      this._dragMove = bind$(this, '_dragMove', prototype);
      this._mouse_up = bind$(this, '_mouse_up', prototype);
      this._mouseDown = bind$(this, '_mouseDown', prototype);
      this._mouseClick = bind$(this, '_mouseClick', prototype);
      this._convoForEvent = bind$(this, '_convoForEvent', prototype);
      this.dontListen = bind$(this, 'dontListen', prototype);
      this.listen = bind$(this, 'listen', prototype);
      this.willBecomeFirstResponder = bind$(this, 'willBecomeFirstResponder', prototype);
      this.goTo = bind$(this, 'goTo', prototype);
      this.endParticipantPick = bind$(this, 'endParticipantPick', prototype);
      this.startParticipantPick = bind$(this, 'startParticipantPick', prototype);
      this.start = bind$(this, 'start', prototype);
      this.populateView = bind$(this, 'populateView', prototype);
      this.init = bind$(this, 'init', prototype);
      this.keyup = bind$(this, 'keyup', prototype);
      this._activateSelection = bind$(this, '_activateSelection', prototype);
      this._moveFocusHorizontal = bind$(this, '_moveFocusHorizontal', prototype);
      this._moveFocusVertical = bind$(this, '_moveFocusVertical', prototype);
      this._moveFocus = bind$(this, '_moveFocus', prototype);
      this.setView = bind$(this, 'setView', prototype);
      this._el = util.getEl(el);
      this._dragX = 0;
      this._dragY = 0;
      this._holdTimeout = null;
      this._memoBounds = null;
      this._memoContainer = null;
      this._memoSibling = null;
      this._focusParent = null;
      this._focusIdx = -1;
      this.setView(el);
      this._convoHolderStack = [];
      this._holdTimeout = null;
      this._dragging = false;
      this._dragX = 0;
      this._dragY = 0;
      this._dragOriginX = 0;
      this._dragOriginY = 0;
      Object.defineProperties(this, {
        ActiveCount: {
          get: function(){
            return this._convoHolderStack.length;
          },
          enumerable: true
        },
        ActiveConversations: {
          get: function(){
            return this._convoHolderStack;
          },
          enumerable: true
        },
        View: {
          value: this._el,
          writable: false,
          enumerable: true
        }
      });
    }
    prototype.setView = function(el){
      if (this.View != null) {
        this.dontListen();
      }
      this.View = util.getEl(el);
      if (this.View != null) {
        this.listen();
      }
    };
    prototype._moveFocus = function(delta){
      var focusParent, children, newFocusIdx;
      focusParent = this._focusParent;
      if (!focusParent) {
        return;
      }
      children = focusParent.children;
      newFocusIdx = this._focusIdx + delta;
      if (newFocusIdx >= 0 && newFocusIdx < children.length) {
        this._focusIdx = newFocusIdx;
        if (this._focus) {
          this._focus.classList.remove('focused');
        }
        this._focus = children[newFocusIdx];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocusVertical = function(delta){
      if (this._focusParent === this._recents || this._focusParent === this._favourites) {
        this._moveFocus(delta);
      } else {
        console.warn("Dont know how to move focus for: " + this._focusParent);
      }
    };
    prototype._moveFocusHorizontal = function(delta){
      if (this._focusParent === this._recents) {
        this._changeFocusParent(this._favourites);
      } else if (this._focusParent === this._favourites) {
        if (this._focusIdx + delta < 0) {
          this._changeFocusParent(this._recents);
        } else {
          this._moveFocus(delta * 2);
        }
      } else {
        console.warn("Dont know how to move focus for: " + this._focusParent);
      }
    };
    prototype._activateSelection = function(e){
      var focus;
      focus = this._focus;
      if (focus == null) {
        return;
      }
      if (focus.classList.contains('conversation')) {
        this._popInConversation(focus);
      }
    };
    prototype.keyup = function(e){
      var result;
      result = true;
      switch (e.skKey) {
      case "Up":
        this._moveFocusVertical(-1);
        break;
      case "Down":
        this._moveFocusVertical(1);
        break;
      case "Left":
        this._moveFocusHorizontal(-1);
        break;
      case "Right":
        this._moveFocusHorizontal(1);
        break;
      case "Enter":
      case "Activate":
        this._activateSelection();
        break;
      default:
        result = false;
      }
      result;
    };
    prototype.init = function(){
      this._focus = this.View.querySelector('.focused');
      this._focusIdx = util.indexOfElement(this._focus);
      this._focusParent = this._recents;
    };
    prototype.populateView = function(){
      var hubRepo, cardClasses;
      if (this.View == null) {
        console.warn("Hub did not have a view when asked to init");
        return;
      }
      this.Recents = document.getElementById('recents');
      this.Favourites = document.getElementById('favourites');
      this.Contacts = document.getElementById('all_contacts');
      hubRepo = Stadium.HubRepository;
      cardClasses = ['card', 'minimised'];
      if (this.Recents != null) {
        __populateConvoPanel(this.Recents, hubRepo.Recents);
      }
      if (this.Favourites != null) {
        __populateConvoPanel(this.Favourites, hubRepo.Favourites);
      }
      if (this.Contacts != null) {
        __populateConvoPanel(this.Contacts, hubRepo.Contacts);
      }
      this._moveFocus(1);
    };
    prototype.start = function(){
      if (this.View == null) {
        console.warn("Attempt to start hub without a view");
        return;
      }
      this.populateView();
      this.View.classList.remove('starting');
    };
    prototype.startParticipantPick = function(){
      this._el.classList.add('picking-participant');
      this.ResponderChain.push(PeoplePicker.ResponderInstance);
    };
    prototype.endParticipantPick = function(){
      this._el.classList.remove('picking-participant');
      this.ResponderChain.pop(PeoplePicker.ResponderInstance);
    };
    prototype.goTo = function(location){
      var convos, view, i$, len$, convoPanel, cl, id, convo;
      convos = this._convoHolderStack;
      view = null;
      for (i$ = 0, len$ = convos.length; i$ < len$; ++i$) {
        convoPanel = convos[i$];
        cl = convoPanel.classList;
        id = convoPanel.getAttribute('data-convo-id');
        if (id !== location) {
          cl.add('aside');
        } else {
          cl.remove('aside');
          view = convoPanel;
        }
      }
      if (location === 'home') {
        this._favourites.classList.remove('is-people-picker');
        Stadium.ResponderChain.pop(ConvoResponder.Instance);
      } else {
        this._favourites.classList.add('is-people-picker');
        convo = Stadium.HubRepository.FindConvo(location);
        if (convo != null) {
          ConvoResponder.Instance.Conversation = convo;
          ConvoResponder.Instance.View = view.children[0];
          Stadium.ResponderChain.push(ConvoResponder.Instance);
        } else {
          console.warn("Could not find conversation: " + location);
        }
      }
    };
    prototype.willBecomeFirstResponder = function(){
      if (this._focusParent === null) {
        this._changeFocusParent(this._recent);
      }
    };
    prototype.listen = function(){
      if (this.View == null) {
        return;
      }
      this.View.addEventListener('mousedown', this._mouseDown);
      this.View.addEventListener('mouseup', this._mouseUp);
      this.View.addEventListener('mousemove', this._mouseMove);
      this.View.addEventListener('click', this._mouseClick);
    };
    prototype.dontListen = function(){
      if (this.View == null) {
        return;
      }
      this.View.removeEventListener('mousedown', this._mouseDown);
      this.View.removeEventListener('mouseup', this._mouseUp);
      this.View.removeEventListener('mousemove', this._mouseMove);
      this.View.removeEventListener('click', this._mouseClick);
    };
    prototype._convoForEvent = function(e){
      var el;
      el = e.target;
      while (!(el === null || el.classList.contains('conversation'))) {
        el = el.parentElement;
      }
      el;
    };
    prototype._mouseClick = function(e){
      var convo;
      convo = this._convoForEvent(e);
      if (convo != null) {
        if (convo.classList.contains('minimised')) {
          this._popInConversation(convo);
        } else {
          this._popOutConversation(convo);
        }
      }
    };
    prototype._mouseDown = function(e){
      var this$ = this;
      this._dragX = e.clientX;
      this._dragY = e.clientY;
      this._holdTimeout = setTimeout(function(){
        return this$._held(e);
      }, 200);
    };
    prototype._mouse_up = function(e){
      var d, s, ds, cl, c, sib;
      if (this._dragging != null) {
        d = this._dragging;
        s = this._dragHolder.style;
        ds = d.style;
        cl = d.classList;
        if (cl.contains('maximised')) {
          if (e.clientY <= window.innerHeight / 2) {
            this._popInConversation(d);
          } else {
            c = this._memoContaine;
            sib = this._memoSibling;
            c.insertBefore(s, sib);
            cl.remove('maximised');
            cl.add('minimised');
          }
        } else {
          ds.removeProperty('width');
          ds.removeProperty('height');
          ds.removeProperty('top');
          ds.removeProperty('left');
          s.removeProperty('transform');
          s.removeProperty('-webkit-transform');
          this._popInConversation(d);
        }
        cl.remove('is-dragged');
        this._dragging = null;
        this.View.classList.remove('dragging');
      }
      if (this._holdTimeout != null) {
        clearTimeout(this._holdTimeout);
      }
    };
    prototype._dragMove = function(e){
      var d, x, y, deltaX, deltaY, style, transform;
      d = this._dragging;
      if (d == null) {
        return;
      }
      x = e.clientX;
      y = e.clientY;
      deltaX = this._dragOriginX + (x - this._dragX);
      deltaY = this._dragOriginY + (y - this._dragY);
      style = this._dragHolder.style;
      transform = ['translateX(', deltaX, 'px) translateY(', deltaY, 'px)'].join('');
      style.transform = transform;
      style.webkitTransform = transform;
    };
    prototype._held = function(e){
      var convo, maximised, s, transform;
      convo = this._convoForEvent(e);
      if (convo == null) {
        return;
      }
      maximised = convo.classList.contains('maximised');
      if (!maximised) {
        this._setupMinimisedDrag(e, convo);
      }
      this._dragHolder.appendChild(convo);
      if (maximised) {
        s = this._dragHolder.style;
        this._dragOriginX = (0 - window.innerWidth / 2) + e.clientX;
        this._dragOriginY = (0 - window.innerHeight / 2) + e.clientY;
        transform = ['translateX(', this._dragOriginX, 'px) translateY(', this._dragOriginY, 'px)'].join('');
        s.transform = transform;
        s.webkitTransform = transform;
        this.View.removeChild(this._convoHolderStack.pop());
      }
      this.View.classList.add('dragging');
      convo.classList.add('is-dragged');
      this._dragging = convo;
    };
    prototype._setupMinimisedDrag = function(e, convo){
      var bounds, topDelta, leftDelta, style;
      bounds = convo.getBoundingClientRect();
      this._memoBounds = bounds;
      this._memoContainer = convo.parentElement;
      this._memoSibling = convo.nextSibling;
      topDelta = 0 - bounds.top;
      leftDelta = 0 - bounds.left;
      style = convo.style;
      style.top = bounds.top + 'px';
      style.left = bounds.left + 'px';
      style.width = bounds.width + 'px';
      style.height = bounds.height + 'px';
    };
    prototype._popInConversation = function(conversation){
      var convoHolder, this$ = this;
      if (this._memoContainer == null) {
        this._memoContainer = conversation.parentElement;
        this._memoSibling = conversation.nextElementSibling;
      }
      convoHolder = util.make('section', 'convo_holder');
      convoHolder.classList.add('hidden');
      convoHolder.style.zIndex = convoHolderZ++;
      this._lostFocusedElement();
      convoHolder.appendChild(conversation);
      conversation.classList.remove('minimised');
      conversation.classList.add('maximised');
      this._convoHolderStack.push(convoHolder);
      this.View.appendChild(convoHolder);
      setTimeout(function(){
        var convoId, convo;
        convoHolder.classList.remove('hidden');
        ConvoResponder.Instance.SetView = conversation;
        convoId = conversation.getAttribute(kConvoIdAtt);
        if (convoId != null) {
          convo = Stadium.HubRepository.FindConvo(convoId);
          if (convo != null) {
            convoHolder.setAttribute('data-convo-id', convo.identity);
            ConvoResponder.Instance.SetConversation(convo);
            Stadium.ResponderChain.push(ConvoResponder.Instance);
            this$._fireEvent('active_conversation_added', convo);
            convo.History.Load();
          } else {
            console.warn("Can't find conversation " + convoId);
          }
        } else {
          console.warn("Element does not have conversation ID");
        }
      }, 100);
    };
    prototype._popOutConversation = function(){
      var convoHolderStack, convoHolder, conversation, c, s, hubEl, this$ = this;
      Stadium.ResponderChain.pop(ConvoResponder.Instance);
      convoHolderStack = this._convoHolderStack;
      convoHolder = convoHolderStack.pop();
      conversation = convoHolder.children[0];
      convoHolder.classList.add('hidden');
      conversation.classList.remove('maximised');
      conversation.classList.add('minimised');
      c = this._memoContainer;
      s = this._memoSibling;
      hubEl = this._el;
      setTimeout(function(){
        var convoId, convo;
        c.insertBefore(conversation, s);
        hubEl.removeChild(convoHolder);
        if (convoHolderStack.length === 0) {
          favourites.classList.remove('is-people-picker');
        }
        this$._memoContainer = null;
        this$._memoSibling = null;
        convoId = conversation.getAttribute(kConvoIdAtt);
        if (convoId != null) {
          convo = Stadium.HubRepository.FindConvo(convoId);
          if (convo != null) {
            this$._fireEvent('active_conversation_removed', convo);
          } else {
            console.warn("Could not find convo " + convoId);
          }
        } else {
          console.warn('Could not get convo ID from element');
        }
      }, 300);
    };
    return Responder;
  }(events.MxWithEvents));
  module.exports = {
    Responder: Responder
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./convo_responder.js":4,"./events.js":8,"./people_picker.js":17,"./util.js":22}],11:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var apply, curry, flip, fix, over;
apply = curry$(function(f, list){
  return f.apply(null, list);
});
curry = function(f){
  return curry$(f);
};
flip = curry$(function(f, x, y){
  return f(y, x);
});
fix = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over = curry$(function(f, g, x, y){
  return f(g(x), g(y));
});
module.exports = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],12:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var each, map, compact, filter, reject, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = {}.toString, slice$ = [].slice;
each = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
partition = curry$(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head = first = function(xs){
  return xs[0];
};
tail = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last = function(xs){
  return xs[xs.length - 1];
};
initial = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty = function(xs){
  return !xs.length;
};
reverse = function(xs){
  return xs.concat().reverse();
};
unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy = curry$(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold = foldl = curry$(function(f, memo, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1 = foldl1 = curry$(function(f, xs){
  return fold(f, xs[0], xs.slice(1));
});
foldr = curry$(function(f, memo, xs){
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1 = curry$(function(f, xs){
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr = curry$(function(f, b){
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat = function(xss){
  return [].concat.apply([], xss);
};
concatMap = curry$(function(f, xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten = function(xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union = function(){
  var xss, results, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort = function(xs){
  return xs.concat().sort(function(x, y){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith = curry$(function(f, xs){
  return xs.concat().sort(f);
});
sortBy = curry$(function(f, xs){
  return xs.concat().sort(function(x, y){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum = function(xs){
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product = function(xs){
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean = average = function(xs){
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum = function(xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum = function(xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy = curry$(function(f, xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy = curry$(function(f, xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan = scanl = curry$(function(f, memo, xs){
  var last, x;
  last = memo;
  return [memo].concat((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1 = scanl1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  return scan(f, xs[0], xs.slice(1));
});
scanr = curry$(function(f, memo, xs){
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
});
scanr1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
});
slice = curry$(function(x, y, xs){
  return xs.slice(x, y);
});
take = curry$(function(n, xs){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop = curry$(function(n, xs){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt = curry$(function(n, xs){
  return [take(n, xs), drop(n, xs)];
});
takeWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span = curry$(function(p, xs){
  return [takeWhile(p, xs), dropWhile(p, xs)];
});
breakList = curry$(function(p, xs){
  return span(function(){
    return not$(p.apply(this, arguments));
  }, xs);
});
zip = curry$(function(xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith = curry$(function(f, xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll = function(){
  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  xss = slice$.call(arguments);
  minLength = 9e9;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith = function(f){
  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];
  xss = slice$.call(arguments, 1);
  minLength = 9e9;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at = curry$(function(n, xs){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex = curry$(function(el, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices = curry$(function(el, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex = curry$(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices = curry$(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
module.exports = {
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function not$(x){ return !x; }
},{}],13:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
max = curry$(function(x$, y$){
  return x$ > y$ ? x$ : y$;
});
min = curry$(function(x$, y$){
  return x$ < y$ ? x$ : y$;
});
negate = function(x){
  return -x;
};
abs = Math.abs;
signum = function(x){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot = curry$(function(x, y){
  return ~~(x / y);
});
rem = curry$(function(x$, y$){
  return x$ % y$;
});
div = curry$(function(x, y){
  return Math.floor(x / y);
});
mod = curry$(function(x$, y$){
  var ref$;
  return ((x$) % (ref$ = y$) + ref$) % ref$;
});
recip = (function(it){
  return 1 / it;
});
pi = Math.PI;
tau = pi * 2;
exp = Math.exp;
sqrt = Math.sqrt;
ln = Math.log;
pow = curry$(function(x$, y$){
  return Math.pow(x$, y$);
});
sin = Math.sin;
tan = Math.tan;
cos = Math.cos;
asin = Math.asin;
acos = Math.acos;
atan = Math.atan;
atan2 = curry$(function(x, y){
  return Math.atan2(x, y);
});
truncate = function(x){
  return ~~x;
};
round = Math.round;
ceiling = Math.ceil;
floor = Math.floor;
isItNaN = function(x){
  return x !== x;
};
even = function(x){
  return x % 2 === 0;
};
odd = function(x){
  return x % 2 !== 0;
};
gcd = curry$(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm = curry$(function(x, y){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
module.exports = {
  max: max,
  min: min,
  negate: negate,
  abs: abs,
  signum: signum,
  quot: quot,
  rem: rem,
  div: div,
  mod: mod,
  recip: recip,
  pi: pi,
  tau: tau,
  exp: exp,
  sqrt: sqrt,
  ln: ln,
  pow: pow,
  sin: sin,
  tan: tan,
  cos: cos,
  acos: acos,
  asin: asin,
  atan: atan,
  atan2: atan2,
  truncate: truncate,
  round: round,
  ceiling: ceiling,
  floor: floor,
  isItNaN: isItNaN,
  even: even,
  odd: odd,
  gcd: gcd,
  lcm: lcm
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],14:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;
values = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object){
  var i$, len$, x, results$ = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    results$[x[0]] = x[1];
  }
  return results$;
};
objToPairs = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$(function(keys, values){
  var i$, len$, i, key, results$ = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    results$[key] = values[i];
  }
  return results$;
});
objToLists = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty = function(object){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
each = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
    results$[k] = f(x);
  }
  return results$;
});
compact = function(object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (x) {
      results$[k] = x;
    }
  }
  return results$;
};
filter = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (f(x)) {
      results$[k] = x;
    }
  }
  return results$;
});
reject = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (!f(x)) {
      results$[k] = x;
    }
  }
  return results$;
});
partition = curry$(function(f, object){
  var passed, failed, k, x;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
module.exports = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],15:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;
split = curry$(function(sep, str){
  return str.split(sep);
});
join = curry$(function(sep, xs){
  return xs.join(sep);
});
lines = function(str){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it){
  return it.join('\n');
};
words = function(str){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it){
  return it.join(' ');
};
chars = function(it){
  return it.split('');
};
unchars = function(it){
  return it.join('');
};
reverse = function(str){
  return str.split('').reverse().join('');
};
repeat = curry$(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
module.exports = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],16:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var Func, List, Obj, Str, Num, id, isType, replicate, prelude, toString$ = {}.toString;
Func = require('./Func.js');
List = require('./List.js');
Obj = require('./Obj.js');
Str = require('./Str.js');
Num = require('./Num.js');
id = function(x){
  return x;
};
isType = curry$(function(type, x){
  return toString$.call(x).slice(8, -1) === type;
});
replicate = curry$(function(n, x){
  var i$, results$ = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str.empty = List.empty;
Str.slice = List.slice;
Str.take = List.take;
Str.drop = List.drop;
Str.splitAt = List.splitAt;
Str.takeWhile = List.takeWhile;
Str.dropWhile = List.dropWhile;
Str.span = List.span;
Str.breakStr = List.breakList;
prelude = {
  Func: Func,
  List: List,
  Obj: Obj,
  Str: Str,
  Num: Num,
  id: id,
  isType: isType,
  replicate: replicate
};
prelude.each = List.each;
prelude.map = List.map;
prelude.filter = List.filter;
prelude.compact = List.compact;
prelude.reject = List.reject;
prelude.partition = List.partition;
prelude.find = List.find;
prelude.head = List.head;
prelude.first = List.first;
prelude.tail = List.tail;
prelude.last = List.last;
prelude.initial = List.initial;
prelude.empty = List.empty;
prelude.reverse = List.reverse;
prelude.difference = List.difference;
prelude.intersection = List.intersection;
prelude.union = List.union;
prelude.countBy = List.countBy;
prelude.groupBy = List.groupBy;
prelude.fold = List.fold;
prelude.foldl = List.foldl;
prelude.fold1 = List.fold1;
prelude.foldl1 = List.foldl1;
prelude.foldr = List.foldr;
prelude.foldr1 = List.foldr1;
prelude.unfoldr = List.unfoldr;
prelude.andList = List.andList;
prelude.orList = List.orList;
prelude.any = List.any;
prelude.all = List.all;
prelude.unique = List.unique;
prelude.uniqueBy = List.uniqueBy;
prelude.sort = List.sort;
prelude.sortWith = List.sortWith;
prelude.sortBy = List.sortBy;
prelude.sum = List.sum;
prelude.product = List.product;
prelude.mean = List.mean;
prelude.average = List.average;
prelude.concat = List.concat;
prelude.concatMap = List.concatMap;
prelude.flatten = List.flatten;
prelude.maximum = List.maximum;
prelude.minimum = List.minimum;
prelude.maximumBy = List.maximumBy;
prelude.minimumBy = List.minimumBy;
prelude.scan = List.scan;
prelude.scanl = List.scanl;
prelude.scan1 = List.scan1;
prelude.scanl1 = List.scanl1;
prelude.scanr = List.scanr;
prelude.scanr1 = List.scanr1;
prelude.slice = List.slice;
prelude.take = List.take;
prelude.drop = List.drop;
prelude.splitAt = List.splitAt;
prelude.takeWhile = List.takeWhile;
prelude.dropWhile = List.dropWhile;
prelude.span = List.span;
prelude.breakList = List.breakList;
prelude.zip = List.zip;
prelude.zipWith = List.zipWith;
prelude.zipAll = List.zipAll;
prelude.zipAllWith = List.zipAllWith;
prelude.at = List.at;
prelude.elemIndex = List.elemIndex;
prelude.elemIndices = List.elemIndices;
prelude.findIndex = List.findIndex;
prelude.findIndices = List.findIndices;
prelude.apply = Func.apply;
prelude.curry = Func.curry;
prelude.flip = Func.flip;
prelude.fix = Func.fix;
prelude.over = Func.over;
prelude.split = Str.split;
prelude.join = Str.join;
prelude.lines = Str.lines;
prelude.unlines = Str.unlines;
prelude.words = Str.words;
prelude.unwords = Str.unwords;
prelude.chars = Str.chars;
prelude.unchars = Str.unchars;
prelude.repeat = Str.repeat;
prelude.capitalize = Str.capitalize;
prelude.camelize = Str.camelize;
prelude.dasherize = Str.dasherize;
prelude.values = Obj.values;
prelude.keys = Obj.keys;
prelude.pairsToObj = Obj.pairsToObj;
prelude.objToPairs = Obj.objToPairs;
prelude.listsToObj = Obj.listsToObj;
prelude.objToLists = Obj.objToLists;
prelude.max = Num.max;
prelude.min = Num.min;
prelude.negate = Num.negate;
prelude.abs = Num.abs;
prelude.signum = Num.signum;
prelude.quot = Num.quot;
prelude.rem = Num.rem;
prelude.div = Num.div;
prelude.mod = Num.mod;
prelude.recip = Num.recip;
prelude.pi = Num.pi;
prelude.tau = Num.tau;
prelude.exp = Num.exp;
prelude.sqrt = Num.sqrt;
prelude.ln = Num.ln;
prelude.pow = Num.pow;
prelude.sin = Num.sin;
prelude.tan = Num.tan;
prelude.cos = Num.cos;
prelude.acos = Num.acos;
prelude.asin = Num.asin;
prelude.atan = Num.atan;
prelude.atan2 = Num.atan2;
prelude.truncate = Num.truncate;
prelude.round = Num.round;
prelude.ceiling = Num.ceiling;
prelude.floor = Num.floor;
prelude.isItNaN = Num.isItNaN;
prelude.even = Num.even;
prelude.odd = Num.odd;
prelude.gcd = Num.gcd;
prelude.lcm = Num.lcm;
prelude.VERSION = '1.1.1';
module.exports = prelude;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./Func.js":11,"./List.js":12,"./Num.js":13,"./Obj.js":14,"./Str.js":15}],17:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var util, delegation, Responder;
  util = require('./util.js');
  delegation = require('./delegation.js');
  Responder = (function(){
    Responder.displayName = 'Responder';
    var prototype = Responder.prototype, constructor = Responder;
    importAll$(prototype, arguments[0]);
    function Responder(peopleEl){
      this.keyup = bind$(this, 'keyup', prototype);
      this._cancelPick = bind$(this, '_cancelPick', prototype);
      this._activateSelection = bind$(this, '_activateSelection', prototype);
      this._moveFocusHorizontal = bind$(this, '_moveFocusHorizontal', prototype);
      this._moveFocus = bind$(this, '_moveFocus', prototype);
      this.willBecomeFirstResponder = bind$(this, 'willBecomeFirstResponder', prototype);
      this._el = util.getEl(peopleEl, 'conversations');
      this._focus = null;
      this._focusIdx = null;
    }
    prototype.willBecomeFirstResponder = function(){
      var children;
      this._focus = this._el.querySelector('.focused');
      if (this._focus) {
        this._focusIdx = util.indexOfElement(this._focus);
      } else {
        children = this._el.children;
        if (children.length > 0) {
          this._focusIdx = 0;
          this._focus = children[this._focusIdx];
          children[this._focusIdx].classList.add("focused");
        }
      }
    };
    prototype._moveFocus = function(delta){
      var children, newFocusIdx;
      children = this._el.children;
      newFocusIdx = this._focusIdx + delta;
      if (newFocusIdx >= 0 && newFocusIdx < children.length) {
        this._focusIdx = newFocusIdx;
        if (this._focus) {
          this._focus.classList.remove('focused');
        }
        this._focus = children[newFocusIdx];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocusVertical = Responder._moveFocus;
    prototype._moveFocusHorizontal = function(delta){
      return this._moveFocus(delta * 2);
    };
    prototype._activateSelection = function(){
      var l, convoId, convo, person;
      l = this._delegates.length;
      if (!(l > 0)) {
        return;
      }
      convoId = this._focus.getAttribute('data-convo-id');
      if (convoId == null) {
        console.warn('No convo ID when picking person');
        return;
      }
      convo = Stadium.HubRepository.FindConvo(convoId);
      if (convo == null) {
        console.warn('Could not find convo when picking person: ' + convoId);
        return;
      }
      if (!(convo.participants.length > 0)) {
        console.warn('Empty conversation when picking participant?' + convo);
        return;
      }
      person = convo.participants[0];
      this.callDelegate('personPicked', person);
    };
    prototype._cancelPick = function(){
      Stadium.Hub.endParticipantPick();
      this.callDelegate('personPickCancelled', null);
    };
    prototype.keyup = function(e){
      var result;
      result = true;
      switch (e.skKey) {
      case "Up":
        this._moveFocusVertical(-1);
        break;
      case "Down":
        this._moveFocusVertical(1);
        break;
      case "Left":
        this._moveFocusHorizontal(-1);
        break;
      case "Right":
        this._moveFocusHorizontal(1);
        break;
      case "Enter":
        break;
      case "Activate":
        this._activateSelection();
        break;
      case "Back":
        this._cancelPick();
        break;
      default:
        result = false;
      }
      return result;
    };
    return Responder;
  }(delegation.WithDelegation));
  module.exports = {
    Responder: Responder,
    ResponderInstance: new Responder()
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./delegation.js":7,"./util.js":22}],18:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var _, video, pid, Person;
  _ = require('prelude-ls');
  video = require('./video.js');
  pid = 1;
  Person = (function(){
    Person.displayName = 'Person';
    var prototype = Person.prototype, constructor = Person;
    function Person(name){
      name == null && (name = 'anon');
      this.playVideo = bind$(this, 'playVideo', prototype);
      Object.defineProperties(this, {
        identifier: {
          value: "person-" + (pid++),
          enumerable: true,
          writable: false
        },
        name: {
          value: name,
          enumerable: true,
          writable: true
        },
        avatar: {
          value: "./img/blank_avatar.png",
          enumerable: true,
          writable: true
        },
        remoteVideos: {
          value: [new video.RemoteVideo()]
        }
      });
    }
    prototype.playVideo = function(){
      var v;
      v = _.find(function(v){
        return v.Playing === false;
      }, this.remoteVideos);
      if (v == null) {
        v = new video.RemoteVideo();
        this.remoteVideos.push(v);
      }
      v.Playing = true;
    };
    return Person;
  }());
  module.exports = {
    Person: Person
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{"./video.js":23,"prelude-ls":16}],19:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var document, Chain;
  document = window.document;
  Chain = (function(){
    Chain.displayName = 'Chain';
    var prototype = Chain.prototype, constructor = Chain;
    function Chain(){
      this.lostFocus = bind$(this, 'lostFocus', prototype);
      this.gotFocus = bind$(this, 'gotFocus', prototype);
      this.pop = bind$(this, 'pop', prototype);
      this.push = bind$(this, 'push', prototype);
      this.keyIntercept = bind$(this, 'keyIntercept', prototype);
      this.dispatch = bind$(this, 'dispatch', prototype);
      this.chain = [];
      this.keyEventNames = ['keydown', 'keyup'];
      this.eventNames = ['mousedown', 'mouseup', 'mouseup'];
      this.listen(this.keyEventNames, this.keyIntercept);
      window.addEventListener('focusin', this.gotFocus);
      window.addEventListener('focusout', this.lostFocus);
      document.addEventListener('contextmenu', this.dispatch);
    }
    prototype.listen = function(names, dispatch){
      var i$, len$, n;
      names == null && (names = this.eventNames);
      dispatch == null && (dispatch = this.dispatch);
      for (i$ = 0, len$ = names.length; i$ < len$; ++i$) {
        n = names[i$];
        document.addEventListener(n, dispatch);
      }
    };
    prototype.dontListen = function(names, dispatch){
      var i$, len$, n;
      names == null && (names = this.eventNames);
      dispatch == null && (dispatch = this.dispatch);
      for (i$ = 0, len$ = names.length; i$ < len$; ++i$) {
        n = names[i$];
        document.removeEventListener(n, dispatch);
      }
    };
    prototype.dispatch = function(e, evName){
      var i$, ref$, len$, responder;
      evName == null && (evName = e.type);
      for (i$ = 0, len$ = (ref$ = this.chain).length; i$ < len$; ++i$) {
        responder = ref$[i$];
        if (_.isType('Function', responder[evName])) {
          if (responder[evName].call(responder, e) === true) {
            e.preventDefault();
            e.stopPropagation();
            break;
          }
        }
      }
    };
    prototype.keyIntercept = function(e){
      var k;
      k = e.keyIdentifier || e.key;
      switch (k) {
      case "U+0041":
        e.skKey = "Activate";
        break;
      case "U+0042":
        e.skKey = "Back";
        break;
      default:
        e.skKey = k;
      }
      this.dispatch(e);
    };
    prototype.push = function(responder){
      if (responder == null) {
        return;
      }
      if (this.chain[0] !== responder) {
        if (_.isType('Function', responder.willBecomeFirstResponder)) {
          responder.willBecomeFirstResponder.call(responder);
        }
        this.chain.unshift(responder);
      }
    };
    prototype.pop = function(responder){
      responder == null && (responder = null);
      if (this.chain.length > 0) {
        if (responder == null) {
          responder = this.chain[0];
        }
        if (this.chain[0] === responder) {
          if (_.isType('Function', responder.willLoseFirstResponder)) {
            responder.willLoseFirstResponder.call(responder);
          }
          this.chain = this.chain.splice(1);
        }
        if (this.chain.length > 0) {
          if (_.isType('Function', this.chain[0].willBecomeFirstResponder)) {
            this.chain[0].willBecomeFirstResponder.call(this.chain[0]);
          }
        }
      }
    };
    prototype.gotFocus = function(e){
      if (e.srcElement.tagName === 'INPUT' || e.srcElement.tagName === 'BUTTON') {
        this.deInitListeners(this.keyEventNames, this.keyIntercept);
      }
    };
    prototype.lostFocus = function(e){
      if (e.srcElement.tagName === 'INPUT' || e.srcElement.tagName === 'BUTTON') {
        this.initListeners(this.keyEventNames, this.keyIntercept);
      }
    };
    return Chain;
  }());
  module.exports = {
    Chain: Chain
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{}],20:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var Delegation, Responder, Switch, util, DebugConvos, Hub, AppNavigation, AppMenu, __blockArrows, document, Stadium;
  Delegation = require('./delegation.js');
  Responder = require('./responder.js');
  Switch = require('./switch.js');
  util = require('./util.js');
  DebugConvos = require('./debug_convos.js');
  Hub = require('./hub.js');
  AppNavigation = require('./app_navigation.js');
  AppMenu = require('./app_menu.js');
  __blockArrows = function(e){
    switch (e.keyCode) {
    case 40:
    case 39:
    case 38:
    case 37:
      e.preventDefault();
    }
  };
  document = window.document;
  Stadium = (function(){
    Stadium.displayName = 'Stadium';
    var prototype = Stadium.prototype, constructor = Stadium;
    importAll$(prototype, arguments[0]);
    Stadium.CreateInstance = function(){
      window.Stadium = new Stadium();
      window.Stadium.init();
      return setTimeout(function(){
        return window.Stadium.start();
      }, 200);
    };
    function Stadium(view){
      view == null && (view = 'app');
      this.start = bind$(this, 'start', prototype);
      this.init = bind$(this, 'init', prototype);
      this.ToggleAppMenu = bind$(this, 'ToggleAppMenu', prototype);
      this.HideAppMenu = bind$(this, 'HideAppMenu', prototype);
      this.ShowAppMenu = bind$(this, 'ShowAppMenu', prototype);
      this.contextmenu = bind$(this, 'contextmenu', prototype);
      this.keyup = bind$(this, 'keyup', prototype);
      this._el = util.getEl(view);
      if (this._el == null) {
        throw new Error('Could not find application view');
      }
      this._hubScroller = this._el.querySelector('.hub_scroller');
      this._contactSwitch = new Switch.Switch('contacts');
      this._appNavResponder = new AppNavigation.Responder();
      this.ResponderChain = new Responder.Chain();
      this.HubRepository = new DebugConvos.Repository();
      this.Hub = new Hub.Responder();
      this.AppMenuResponder = new AppMenu.Responder(document.getElementById('AppMenu'), this.Hub);
    }
    prototype.keyup = function(e){
      var k;
      k = e.keyIdentifier || e.key;
      switch (k) {
      case "U+0020":
      case " ":
        this.contextmenu(e);
        true;
        break;
      default:
        false;
      }
    };
    prototype.contextmenu = function(e){
      var cl;
      cl = this._el.classList;
      if (!cl.contains('app-menu-active')) {
        this.ShowAppMenu();
      } else {
        this.HideAppMenu();
      }
      true;
    };
    prototype.ShowAppMenu = function(){
      var cl, responder;
      cl = this._el.classList;
      cl.add('app-menu-visible');
      setTimeout(function(){
        cl.add('app-menu-will-open');
        return setTimeout(function(){
          return cl.add('app-menu-visible');
        }, cl.remove('app-menu-will-open'), 100);
      }, 100);
      responder = this.AppMenuResponder;
      this.ResponderChain.push(this.AppMenuResponder);
      window.addEventListener('keydown', __blockArrows);
      return;
      setTimeout(function(){
        cl.add('app-menu-preprep');
        return setTimeout(function(){
          cl.add('app-menu-prep');
          return setTimeout(function(){
            cl.add('app-menu-active');
            return responder._calculateHubScroll();
          }, 500);
        }, 30);
      }, 30);
    };
    prototype.HideAppMenu = function(newLocation){
      var cl, scrollerStyle, activeCount;
      cl = this._el.classList;
      setTimeout(function(){
        cl.add('app-menu-will-close');
        return setTimeout(function(){
          cl.remove('app-menu-visible');
          return setTimeout(function(){
            return cl.remove('app-menu-will-close');
          }, 50);
        }, 50);
      }, 100);
      this.ResponderChain.pop();
      return;
      cl.remove('app-menu-visible');
      return;
      cl.remove('app-menu-preprep');
      cl.remove('app-menu-prep');
      cl.remove('app-menu-active');
      scrollerStyle = this._hubScroller.style;
      activeCount = this.Hub.ActiveCount;
      setTimeout(function(){
        return scrollerStyle.overflow = 'hidden';
      }, 30);
      window.removeEventListener('keydown', __blockArrows);
      if (newLocation != null) {
        this.Hub.GoTo(newLocation);
      }
    };
    prototype.ToggleAppMenu = function(){
      if (this._el.classList.contains('app-menu-visible')) {
        this.HideAppMenu();
      } else {
        this.ShowAppMenu();
      }
    };
    prototype.init = function(){
      this.Hub.init();
    };
    prototype.start = function(){
      this.Hub.start();
    };
    return Stadium;
  }(Delegation.WithDelegation));
  document.addEventListener('DOMContentLoaded', Stadium.CreateInstance);
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./app_menu.js":1,"./app_navigation.js":2,"./debug_convos.js":6,"./delegation.js":7,"./hub.js":10,"./responder.js":19,"./switch.js":21,"./util.js":22}],21:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  "use strict";
  var util, _, kStackClass, kItemClass, kSwitchesClass, kSwitchClass, kOffRightClass, kOffLeftClass, kSelectedClass, kVisibleClass, kVisibleItemClass, Switch;
  util = require('./util.js');
  _ = require('prelude-ls');
  kStackClass = 'nav_stack';
  kItemClass = 'nav_item';
  kSwitchesClass = 'switches';
  kSwitchClass = 'switch';
  kOffRightClass = 'off_right';
  kOffLeftClass = 'off_left';
  kSelectedClass = 'selected';
  kVisibleClass = 'visible';
  kVisibleItemClass = kItemClass + " " + kVisibleClass;
  Switch = (function(){
    Switch.displayName = 'Switch';
    var prototype = Switch.prototype, constructor = Switch;
    function Switch(el){
      this.click = bind$(this, 'click', prototype);
      this.dontListen = bind$(this, 'dontListen', prototype);
      this.listen = bind$(this, 'listen', prototype);
      this.setView = bind$(this, 'setView', prototype);
      if (el == null) {
        throw new Error('Need an element to switch');
      }
      this.selected = null;
      this.selectedIdx = -1;
      this.delegates = [];
      this.offLeft = [];
      this.offRight = [];
      this.setView(el);
    }
    prototype.setView = function(el){
      if (this.View != null) {
        this.dontListen();
      }
      this.View = util.getEl(el);
      if (this.View != null) {
        this.triggers = this.View.getElementsByClassName(kSwitchClass);
        this.offRight = this.View.getElementsByClassName(kOffRightClass);
        this.offLeft = this.View.getElementsByClassName(kOffLeftClass);
        this.listen();
        this.selectedIdx = _.findIndex(function(e){
          return e.classList.contains(kSelectedClass);
        }, this.triggers);
        if (this.selectedIdx != null) {
          this.selected = this.triggers[this.selectedIdx];
        } else {
          this.selected = null;
          this.selectedIdx = -1;
        }
        return this.visiblePanel = this.View.getElementsByClassName(kVisibleItemClass);
      }
    };
    prototype.listen = function(){
      if (this.View != null) {
        return this.View.addEventListener('click', this.click);
      }
    };
    prototype.dontListen = function(){
      if (this.View != null) {
        return this.View.removeEventListener('click', this.click);
      }
    };
    prototype.click = function(e){
      var item, itemCl, newIdx, d, _inc, fromClass, fromItems, toClass, cl, i;
      item = e.srcElement;
      if (item != null) {
        itemCl = item.classList;
        if (itemCl.contains('switch')) {
          if (!itemCl.contains('selected')) {
            if (this.selected != null) {
              this.selected.classList.remove('selected');
            }
            this.selected = item;
            if (this.selectedIdx !== -1) {
              newIdx = Array.prototype.indexOf.call(this.triggers, this.selected);
              if (newIdx !== -1) {
                d = newIdx - this.selectedIdx;
                if (d > 0) {
                  _inc = -1;
                  fromClass = kOffRightClass;
                  fromItems = this.offRight;
                  toClass = kOffLeftClass;
                } else {
                  _inc = 1;
                  fromClass = kOffLeftClass;
                  fromItems = this.offLeft;
                  toClass = kOffRightClass;
                }
                d += _inc;
                while (this.visiblePanel.length > 0) {
                  cl = this.visiblePanel[0].classList;
                  cl.add(toClass);
                  cl.remove(kVisibleClass);
                }
                while (d !== 0 && fromItems > 0) {
                  i = fromItems[0];
                  i.classList.remove(fromClass);
                  i.classList.add(toClass);
                }
                if (fromItems.length > 0) {
                  cl = fromItems[0].classList;
                  cl.remove(fromClass);
                  cl.add(kVisibleClass);
                }
              }
              return itemCl.add('selected');
            } else {
              console.warn("could not find trigger in collection");
              return console.warn(this.selected);
            }
          }
        }
      }
    };
    return Switch;
  }());
  module.exports = {
    Switch: Switch
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{"./util.js":22,"prelude-ls":16}],22:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var document, make, getEl, indexOfElement, insertionIndexFor, toString$ = {}.toString;
  document = window.document;
  make = function(tagName, className, parent, content){
    var e, i$, len$, cl;
    tagName == null && (tagName = 'div');
    className == null && (className = null);
    parent == null && (parent = null);
    content == null && (content = null);
    e = document.createElement(tagName);
    switch (toString$.call(className).slice(8, -1)) {
    case 'String':
      e.classList.add(className);
      break;
    case 'Array':
      for (i$ = 0, len$ = className.length; i$ < len$; ++i$) {
        cl = className[i$];
        e.classList.add(cl);
      }
    }
    switch (toString$.call(content).slice(8, -1)) {
    case 'String':
      e.appendChild(document.createTextNode(content));
      break;
    default:
      if (content instanceof window.Node) {
        e.appendChild(content);
      }
    }
    if (parent != null) {
      parent.appendChild(e);
    }
    return e;
  };
  getEl = function(el, dflt, root){
    el == null && (el = null);
    dflt == null && (dflt = null);
    root == null && (root = document);
    if (el == null) {
      if (dflt != null) {
        getEl(dflt, null, root);
      } else {
        return null;
      }
    }
    if (el instanceof window.Element) {
      return el;
    } else {
      switch (toString$.call(el).slice(8, -1)) {
      case 'String':
        if (el[0] === '.' || el[0] === '#') {
          return root.querySelector(el);
        } else {
          return root.getElementById(el);
        }
        break;
      case 'DOMElement':
        return el;
      default:
        if (dflt !== null) {
          return getEl(dflt, null, root);
        } else {
          console.log(toString$.call(el).slice(8, -1));
          return null;
        }
      }
    }
  };
  indexOfElement = function(element){
    var parent, children;
    if (element == null) {
      return -1;
    }
    parent = element.parentElement;
    if (parent == null) {
      return -1;
    }
    children = parent.children;
    return Array.prototype.indexOf.call(children, element);
  };
  insertionIndexFor = function(item, collection, comparer){
    var l, idx;
    if (!(item != null && collection != null && comparer != null)) {
      return -1;
    }
    l = collection.length;
    idx = 0;
    while (idx < l && comparer(item, collection[idx]) <= 0) {
      idx += 1;
    }
    return idx;
  };
  module.exports = {
    make: make,
    getEl: getEl,
    indexOfElement: indexOfElement
  };
}).call(this);

},{}],23:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var _vid, _createVideoTag, RemoteVideo;
  _vid = 0;
  _createVideoTag = function(){
    var t;
    t = document.createElement('video');
    t.setAttribute('src', './videos/big_buck_bunny.webm');
    return t;
  };
  RemoteVideo = (function(){
    RemoteVideo.displayName = 'RemoteVideo';
    var prototype = RemoteVideo.prototype, constructor = RemoteVideo;
    function RemoteVideo(){
      this._starting = false;
      this._playing = false;
      this._videoTag = null;
      this._identifier = null;
      Object.defineProperties(this, {
        Playing: {
          value: false,
          writable: true,
          enumerable: true
        },
        Starting: {
          value: false,
          writable: true,
          enumerable: true
        },
        VideoTag: {
          get: function(){
            if (this._videoTag == null) {
              this._videoTag = _createVideoTag();
              this._identifier = this._videoTag.src;
            }
            return this._videoTag;
          },
          set: function(v){
            this._videoTag = v;
            this._identifier = this._videoTag.src;
          },
          enumerable: true
        },
        identifier: {
          value: "foo",
          enumerable: true,
          writable: true
        }
      });
    }
    return RemoteVideo;
  }());
  module.exports = {
    RemoteVideo: RemoteVideo
  };
}).call(this);

},{}]},{},[20]);
