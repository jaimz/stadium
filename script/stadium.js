// Generated by LiveScript 1.2.0
(function(){
  var Delegation, Responder, Switch, util, DebugConvos, Hub, AppNavigation, AppMenu, __blockArrows, document, Stadium;
  Delegation = require('./delegation.js');
  Responder = require('./responder.js');
  Switch = require('./switch.js');
  util = require('./util.js');
  DebugConvos = require('./debug_convos.js');
  Hub = require('./hub.js');
  AppNavigation = require('./app_navigation.js');
  AppMenu = require('./app_menu.js');
  __blockArrows = function(e){
    switch (e.keyCode) {
    case 40:
    case 39:
    case 38:
    case 37:
      e.preventDefault();
    }
  };
  document = window.document;
  Stadium = (function(){
    Stadium.displayName = 'Stadium';
    var prototype = Stadium.prototype, constructor = Stadium;
    importAll$(prototype, arguments[0]);
    Stadium.CreateInstance = function(){
      window.Stadium = new Stadium();
      window.Stadium.init();
      return setTimeout(function(){
        return window.Stadium.start();
      }, 200);
    };
    function Stadium(view){
      view == null && (view = 'app');
      this.start = bind$(this, 'start', prototype);
      this.init = bind$(this, 'init', prototype);
      this.ToggleAppMenu = bind$(this, 'ToggleAppMenu', prototype);
      this.HideAppMenu = bind$(this, 'HideAppMenu', prototype);
      this.ShowAppMenu = bind$(this, 'ShowAppMenu', prototype);
      this.contextmenu = bind$(this, 'contextmenu', prototype);
      this.keyup = bind$(this, 'keyup', prototype);
      this._el = util.getEl(view);
      if (this._el == null) {
        throw new Error('Could not find application view');
      }
      this._hubScroller = this._el.querySelector('.hub_scroller');
      this._contactSwitch = new Switch.Switch('contacts');
      this._appNavResponder = new AppNavigation.Responder();
      this.ResponderChain = new Responder.Chain();
      this.HubRepository = new DebugConvos.Repository();
      this.Hub = new Hub.Responder();
      this.AppMenuResponder = new AppMenu.Responder(document.getElementById('AppMenu'), this.Hub);
    }
    prototype.keyup = function(e){
      var k;
      k = e.keyIdentifier || e.key;
      switch (k) {
      case "U+0020":
      case " ":
        this.contextmenu(e);
        true;
        break;
      default:
        false;
      }
    };
    prototype.contextmenu = function(e){
      var cl;
      cl = this._el.classList;
      if (!cl.contains('app-menu-active')) {
        this.ShowAppMenu();
      } else {
        this.HideAppMenu();
      }
      true;
    };
    prototype.ShowAppMenu = function(){
      var cl, responder;
      cl = this._el.classList;
      cl.add('app-menu-visible');
      setTimeout(function(){
        cl.add('app-menu-will-open');
        return setTimeout(function(){
          return cl.add('app-menu-visible');
        }, cl.remove('app-menu-will-open'), 100);
      }, 100);
      responder = this.AppMenuResponder;
      this.ResponderChain.push(this.AppMenuResponder);
      window.addEventListener('keydown', __blockArrows);
      return;
      setTimeout(function(){
        cl.add('app-menu-preprep');
        return setTimeout(function(){
          cl.add('app-menu-prep');
          return setTimeout(function(){
            cl.add('app-menu-active');
            return responder._calculateHubScroll();
          }, 500);
        }, 30);
      }, 30);
    };
    prototype.HideAppMenu = function(newLocation){
      var cl, scrollerStyle, activeCount;
      cl = this._el.classList;
      setTimeout(function(){
        cl.add('app-menu-will-close');
        return setTimeout(function(){
          cl.remove('app-menu-visible');
          return setTimeout(function(){
            return cl.remove('app-menu-will-close');
          }, 50);
        }, 50);
      }, 100);
      this.ResponderChain.pop();
      return;
      cl.remove('app-menu-visible');
      return;
      cl.remove('app-menu-preprep');
      cl.remove('app-menu-prep');
      cl.remove('app-menu-active');
      scrollerStyle = this._hubScroller.style;
      activeCount = this.Hub.ActiveCount;
      setTimeout(function(){
        return scrollerStyle.overflow = 'hidden';
      }, 30);
      window.removeEventListener('keydown', __blockArrows);
      if (newLocation != null) {
        this.Hub.GoTo(newLocation);
      }
    };
    prototype.ToggleAppMenu = function(){
      if (this._el.classList.contains('app-menu-visible')) {
        this.HideAppMenu();
      } else {
        this.ShowAppMenu();
      }
    };
    prototype.init = function(){
      this.Hub.init();
    };
    prototype.start = function(){
      this.Hub.start();
    };
    return Stadium;
  }(Delegation.WithDelegation));
  document.addEventListener('DOMContentLoaded', Stadium.CreateInstance);
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
