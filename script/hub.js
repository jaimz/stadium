// Generated by LiveScript 1.2.0
(function(){
  var util, events, ConvoResponder, PeoplePicker, kHubId, kConvoIdAtt, convoHolderZ, __makeConvoEl, __populateConvoPanel, Responder;
  util = require('./util.js');
  events = require('./events.js');
  ConvoResponder = require('./convo_responder.js');
  PeoplePicker = require('./people_picker.js');
  kHubId = '#hub';
  kConvoIdAtt = 'data-convo-id';
  convoHolderZ = 10;
  __makeConvoEl = function(convo, auxClasses){
    var mk, convoEl, i$, len$, c, cardInfo, convoActions, a, history, msgEd, msgInput, callActions;
    auxClasses == null && (auxClasses = ['card', 'minimised']);
    if (convo == null) {
      return null;
    }
    mk = util.make;
    convoEl = mk('div', 'conversation');
    for (i$ = 0, len$ = auxClasses.length; i$ < len$; ++i$) {
      c = auxClasses[i$];
      convoEl.classList.add(c);
    }
    convoEl.setAttribute('data-convo-id', convo.identity);
    mk('div', 'avatar', convoEl);
    mk('div', ['status_pip', 'online'], convoEl);
    cardInfo = mk('div', 'card_info', convoEl);
    mk('div', 'convo_name', cardInfo, convo.name);
    mk('div', 'last_message', cardInfo, convo.LastMessage);
    convoActions = mk('div', 'convo_actions', convoEl);
    a = mk('div', 'action', convoActions, 'call');
    a.setAttribute('data-cmd-id', 'makeVideoCall');
    a = mk('div', 'action', convoActions, 'voice call');
    a.setAttribute('data-cmd-id', 'makeAudioCall');
    a = mk('div', 'action', convoActions, 'add people');
    a.setAttribute('data-cmd-id', 'addParticipant');
    history = mk('div', 'history', convoEl);
    mk('div', 'messages', history);
    msgEd = mk('div', 'message_editor', history);
    msgInput = mk('input', 'message_input', msgEd);
    msgInput.setAttribute('type', 'text');
    callActions = mk('div', 'call_actions', convoEl);
    a = mk('div', 'action', callActions, 'add');
    a.setAttribute('data-cmd-id', 'addParticipant');
    a = mk('div', 'action', callActions, 'im');
    a.setAttribute('data-cmd-id', 'toggleIMs');
    a = mk('div', 'action', callActions, 'end');
    a.setAttribute('data-cmd-id', 'endCall');
    return convoEl;
  };
  __populateConvoPanel = function(panel, convos){
    var i$, len$, convo, e, results$ = [];
    for (i$ = 0, len$ = convos.length; i$ < len$; ++i$) {
      convo = convos[i$];
      e = __makeConvoEl(convo);
      if (e != null) {
        results$.push(panel.appendChild(e));
      }
    }
    return results$;
  };
  Responder = (function(){
    Responder.displayName = 'Responder';
    var prototype = Responder.prototype, constructor = Responder;
    importAll$(prototype, arguments[0]);
    function Responder(el){
      el == null && (el = kHubId);
      this._popOutConversation = bind$(this, '_popOutConversation', prototype);
      this._popInConversation = bind$(this, '_popInConversation', prototype);
      this._setupMinimisedDrag = bind$(this, '_setupMinimisedDrag', prototype);
      this._held = bind$(this, '_held', prototype);
      this._dragMove = bind$(this, '_dragMove', prototype);
      this._mouse_up = bind$(this, '_mouse_up', prototype);
      this._mouseDown = bind$(this, '_mouseDown', prototype);
      this._mouseClick = bind$(this, '_mouseClick', prototype);
      this._convoForEvent = bind$(this, '_convoForEvent', prototype);
      this.dontListen = bind$(this, 'dontListen', prototype);
      this.listen = bind$(this, 'listen', prototype);
      this.willBecomeFirstResponder = bind$(this, 'willBecomeFirstResponder', prototype);
      this.goTo = bind$(this, 'goTo', prototype);
      this.endParticipantPick = bind$(this, 'endParticipantPick', prototype);
      this.startParticipantPick = bind$(this, 'startParticipantPick', prototype);
      this.start = bind$(this, 'start', prototype);
      this.populateView = bind$(this, 'populateView', prototype);
      this.init = bind$(this, 'init', prototype);
      this.keyup = bind$(this, 'keyup', prototype);
      this._activateSelection = bind$(this, '_activateSelection', prototype);
      this._moveFocusHorizontal = bind$(this, '_moveFocusHorizontal', prototype);
      this._moveFocusVertical = bind$(this, '_moveFocusVertical', prototype);
      this._moveFocus = bind$(this, '_moveFocus', prototype);
      this.setView = bind$(this, 'setView', prototype);
      this._el = util.getEl(el);
      this._dragX = 0;
      this._dragY = 0;
      this._holdTimeout = null;
      this._memoBounds = null;
      this._memoContainer = null;
      this._memoSibling = null;
      this._focusParent = null;
      this._focusIdx = -1;
      this.setView(el);
      this._convoHolderStack = [];
      this._holdTimeout = null;
      this._dragging = false;
      this._dragX = 0;
      this._dragY = 0;
      this._dragOriginX = 0;
      this._dragOriginY = 0;
      Object.defineProperties(this, {
        ActiveCount: {
          get: function(){
            return this._convoHolderStack.length;
          },
          enumerable: true
        },
        ActiveConversations: {
          get: function(){
            return this._convoHolderStack;
          },
          enumerable: true
        },
        View: {
          value: this._el,
          writable: false,
          enumerable: true
        }
      });
    }
    prototype.setView = function(el){
      if (this.View != null) {
        this.dontListen();
      }
      this.View = util.getEl(el);
      if (this.View != null) {
        this.listen();
      }
    };
    prototype._moveFocus = function(delta){
      var focusParent, children, newFocusIdx;
      focusParent = this._focusParent;
      if (!focusParent) {
        return;
      }
      children = focusParent.children;
      newFocusIdx = this._focusIdx + delta;
      if (newFocusIdx >= 0 && newFocusIdx < children.length) {
        this._focusIdx = newFocusIdx;
        if (this._focus) {
          this._focus.classList.remove('focused');
        }
        this._focus = children[newFocusIdx];
        this._focus.classList.add('focused');
      }
    };
    prototype._moveFocusVertical = function(delta){
      if (this._focusParent === this._recents || this._focusParent === this._favourites) {
        this._moveFocus(delta);
      } else {
        console.warn("Dont know how to move focus for: " + this._focusParent);
      }
    };
    prototype._moveFocusHorizontal = function(delta){
      if (this._focusParent === this._recents) {
        this._changeFocusParent(this._favourites);
      } else if (this._focusParent === this._favourites) {
        if (this._focusIdx + delta < 0) {
          this._changeFocusParent(this._recents);
        } else {
          this._moveFocus(delta * 2);
        }
      } else {
        console.warn("Dont know how to move focus for: " + this._focusParent);
      }
    };
    prototype._activateSelection = function(e){
      var focus;
      focus = this._focus;
      if (focus == null) {
        return;
      }
      if (focus.classList.contains('conversation')) {
        this._popInConversation(focus);
      }
    };
    prototype.keyup = function(e){
      var result;
      result = true;
      switch (e.skKey) {
      case "Up":
        this._moveFocusVertical(-1);
        break;
      case "Down":
        this._moveFocusVertical(1);
        break;
      case "Left":
        this._moveFocusHorizontal(-1);
        break;
      case "Right":
        this._moveFocusHorizontal(1);
        break;
      case "Enter":
      case "Activate":
        this._activateSelection();
        break;
      default:
        result = false;
      }
      result;
    };
    prototype.init = function(){
      this._focus = this.View.querySelector('.focused');
      this._focusIdx = util.indexOfElement(this._focus);
      this._focusParent = this._recents;
    };
    prototype.populateView = function(){
      var hubRepo, cardClasses;
      if (this.View == null) {
        console.warn("Hub did not have a view when asked to init");
        return;
      }
      this.Recents = document.getElementById('recents');
      this.Favourites = document.getElementById('favourites');
      this.Contacts = document.getElementById('all_contacts');
      hubRepo = Stadium.HubRepository;
      cardClasses = ['card', 'minimised'];
      if (this.Recents != null) {
        __populateConvoPanel(this.Recents, hubRepo.Recents);
      }
      if (this.Favourites != null) {
        __populateConvoPanel(this.Favourites, hubRepo.Favourites);
      }
      if (this.Contacts != null) {
        __populateConvoPanel(this.Contacts, hubRepo.Contacts);
      }
      this._moveFocus(1);
    };
    prototype.start = function(){
      if (this.View == null) {
        console.warn("Attempt to start hub without a view");
        return;
      }
      this.populateView();
      this.View.classList.remove('starting');
    };
    prototype.startParticipantPick = function(){
      this._el.classList.add('picking-participant');
      this.ResponderChain.push(PeoplePicker.ResponderInstance);
    };
    prototype.endParticipantPick = function(){
      this._el.classList.remove('picking-participant');
      this.ResponderChain.pop(PeoplePicker.ResponderInstance);
    };
    prototype.goTo = function(location){
      var convos, view, i$, len$, convoPanel, cl, id, convo;
      convos = this._convoHolderStack;
      view = null;
      for (i$ = 0, len$ = convos.length; i$ < len$; ++i$) {
        convoPanel = convos[i$];
        cl = convoPanel.classList;
        id = convoPanel.getAttribute('data-convo-id');
        if (id !== location) {
          cl.add('aside');
        } else {
          cl.remove('aside');
          view = convoPanel;
        }
      }
      if (location === 'home') {
        this._favourites.classList.remove('is-people-picker');
        Stadium.ResponderChain.pop(ConvoResponder.Instance);
      } else {
        this._favourites.classList.add('is-people-picker');
        convo = Stadium.HubRepository.FindConvo(location);
        if (convo != null) {
          ConvoResponder.Instance.Conversation = convo;
          ConvoResponder.Instance.View = view.children[0];
          Stadium.ResponderChain.push(ConvoResponder.Instance);
        } else {
          console.warn("Could not find conversation: " + location);
        }
      }
    };
    prototype.willBecomeFirstResponder = function(){
      if (this._focusParent === null) {
        this._changeFocusParent(this._recent);
      }
    };
    prototype.listen = function(){
      if (this.View == null) {
        return;
      }
      this.View.addEventListener('mousedown', this._mouseDown);
      this.View.addEventListener('mouseup', this._mouseUp);
      this.View.addEventListener('mousemove', this._mouseMove);
      this.View.addEventListener('click', this._mouseClick);
    };
    prototype.dontListen = function(){
      if (this.View == null) {
        return;
      }
      this.View.removeEventListener('mousedown', this._mouseDown);
      this.View.removeEventListener('mouseup', this._mouseUp);
      this.View.removeEventListener('mousemove', this._mouseMove);
      this.View.removeEventListener('click', this._mouseClick);
    };
    prototype._convoForEvent = function(e){
      var el;
      el = e.target;
      while (!(el === null || el.classList.contains('conversation'))) {
        el = el.parentElement;
      }
      el;
    };
    prototype._mouseClick = function(e){
      var convo;
      convo = this._convoForEvent(e);
      if (convo != null) {
        if (convo.classList.contains('minimised')) {
          this._popInConversation(convo);
        } else {
          this._popOutConversation(convo);
        }
      }
    };
    prototype._mouseDown = function(e){
      var this$ = this;
      this._dragX = e.clientX;
      this._dragY = e.clientY;
      this._holdTimeout = setTimeout(function(){
        return this$._held(e);
      }, 200);
    };
    prototype._mouse_up = function(e){
      var d, s, ds, cl, c, sib;
      if (this._dragging != null) {
        d = this._dragging;
        s = this._dragHolder.style;
        ds = d.style;
        cl = d.classList;
        if (cl.contains('maximised')) {
          if (e.clientY <= window.innerHeight / 2) {
            this._popInConversation(d);
          } else {
            c = this._memoContaine;
            sib = this._memoSibling;
            c.insertBefore(s, sib);
            cl.remove('maximised');
            cl.add('minimised');
          }
        } else {
          ds.removeProperty('width');
          ds.removeProperty('height');
          ds.removeProperty('top');
          ds.removeProperty('left');
          s.removeProperty('transform');
          s.removeProperty('-webkit-transform');
          this._popInConversation(d);
        }
        cl.remove('is-dragged');
        this._dragging = null;
        this.View.classList.remove('dragging');
      }
      if (this._holdTimeout != null) {
        clearTimeout(this._holdTimeout);
      }
    };
    prototype._dragMove = function(e){
      var d, x, y, deltaX, deltaY, style, transform;
      d = this._dragging;
      if (d == null) {
        return;
      }
      x = e.clientX;
      y = e.clientY;
      deltaX = this._dragOriginX + (x - this._dragX);
      deltaY = this._dragOriginY + (y - this._dragY);
      style = this._dragHolder.style;
      transform = ['translateX(', deltaX, 'px) translateY(', deltaY, 'px)'].join('');
      style.transform = transform;
      style.webkitTransform = transform;
    };
    prototype._held = function(e){
      var convo, maximised, s, transform;
      convo = this._convoForEvent(e);
      if (convo == null) {
        return;
      }
      maximised = convo.classList.contains('maximised');
      if (!maximised) {
        this._setupMinimisedDrag(e, convo);
      }
      this._dragHolder.appendChild(convo);
      if (maximised) {
        s = this._dragHolder.style;
        this._dragOriginX = (0 - window.innerWidth / 2) + e.clientX;
        this._dragOriginY = (0 - window.innerHeight / 2) + e.clientY;
        transform = ['translateX(', this._dragOriginX, 'px) translateY(', this._dragOriginY, 'px)'].join('');
        s.transform = transform;
        s.webkitTransform = transform;
        this.View.removeChild(this._convoHolderStack.pop());
      }
      this.View.classList.add('dragging');
      convo.classList.add('is-dragged');
      this._dragging = convo;
    };
    prototype._setupMinimisedDrag = function(e, convo){
      var bounds, topDelta, leftDelta, style;
      bounds = convo.getBoundingClientRect();
      this._memoBounds = bounds;
      this._memoContainer = convo.parentElement;
      this._memoSibling = convo.nextSibling;
      topDelta = 0 - bounds.top;
      leftDelta = 0 - bounds.left;
      style = convo.style;
      style.top = bounds.top + 'px';
      style.left = bounds.left + 'px';
      style.width = bounds.width + 'px';
      style.height = bounds.height + 'px';
    };
    prototype._popInConversation = function(conversation){
      var convoHolder, this$ = this;
      if (this._memoContainer == null) {
        this._memoContainer = conversation.parentElement;
        this._memoSibling = conversation.nextElementSibling;
      }
      convoHolder = util.make('section', 'convo_holder');
      convoHolder.classList.add('hidden');
      convoHolder.style.zIndex = convoHolderZ++;
      this._lostFocusedElement();
      convoHolder.appendChild(conversation);
      conversation.classList.remove('minimised');
      conversation.classList.add('maximised');
      this._convoHolderStack.push(convoHolder);
      this.View.appendChild(convoHolder);
      setTimeout(function(){
        var convoId, convo;
        convoHolder.classList.remove('hidden');
        ConvoResponder.Instance.SetView = conversation;
        convoId = conversation.getAttribute(kConvoIdAtt);
        if (convoId != null) {
          convo = Stadium.HubRepository.FindConvo(convoId);
          if (convo != null) {
            convoHolder.setAttribute('data-convo-id', convo.identity);
            ConvoResponder.Instance.SetConversation(convo);
            Stadium.ResponderChain.push(ConvoResponder.Instance);
            this$._fireEvent('active_conversation_added', convo);
            convo.History.Load();
          } else {
            console.warn("Can't find conversation " + convoId);
          }
        } else {
          console.warn("Element does not have conversation ID");
        }
      }, 100);
    };
    prototype._popOutConversation = function(){
      var convoHolderStack, convoHolder, conversation, c, s, hubEl, this$ = this;
      Stadium.ResponderChain.pop(ConvoResponder.Instance);
      convoHolderStack = this._convoHolderStack;
      convoHolder = convoHolderStack.pop();
      conversation = convoHolder.children[0];
      convoHolder.classList.add('hidden');
      conversation.classList.remove('maximised');
      conversation.classList.add('minimised');
      c = this._memoContainer;
      s = this._memoSibling;
      hubEl = this._el;
      setTimeout(function(){
        var convoId, convo;
        c.insertBefore(conversation, s);
        hubEl.removeChild(convoHolder);
        if (convoHolderStack.length === 0) {
          favourites.classList.remove('is-people-picker');
        }
        this$._memoContainer = null;
        this$._memoSibling = null;
        convoId = conversation.getAttribute(kConvoIdAtt);
        if (convoId != null) {
          convo = Stadium.HubRepository.FindConvo(convoId);
          if (convo != null) {
            this$._fireEvent('active_conversation_removed', convo);
          } else {
            console.warn("Could not find convo " + convoId);
          }
        } else {
          console.warn('Could not get convo ID from element');
        }
      }, 300);
    };
    return Responder;
  }(events.MxWithEvents));
  module.exports = {
    Responder: Responder
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
